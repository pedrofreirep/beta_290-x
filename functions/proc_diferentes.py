import pandas as pd
import streamlit as st

@st.cache_resource(show_spinner="Identificando procedimentos com nomes diferentes na base")
def proc_diferentes_func(df_append_all, filter_insurance):
    # 2 Procedimentos diferentes ou com descrição diferente da própria base, para o mesmo código

    # Contando a quantidade de descrições diferentes para cada código na base
    qtd_proc_diferentes = df_append_all[['cod_tuss', 'proc_operadora', 'operadora']]
    qtd_proc_diferentes.loc[:, 'proc_operadora'] = qtd_proc_diferentes['proc_operadora'].str.strip().str.capitalize().replace(" ",'', regex=True)
    qtd_proc_diferentes = qtd_proc_diferentes.groupby(['cod_tuss', 'operadora']).nunique('cod_tuss')
    qtd_proc_diferentes = qtd_proc_diferentes[qtd_proc_diferentes['proc_operadora'] > 1].reset_index()
    qtd_proc_diferentes = qtd_proc_diferentes.rename(columns={"proc_operadora": "qtd_proc_diferentes"})

    # Contando a quantidade de repetições para cada descrição existente para cada procedimento
    repeticoes_proc_diferentes = df_append_all[['cod_tuss', 'proc_operadora', 'operadora', 'valor_pago']].groupby(['cod_tuss', 'proc_operadora', 'operadora']).count().reset_index()
    # repeticoes_proc_diferentes = repeticoes_proc_diferentes.reset_index()
    repeticoes_proc_diferentes = repeticoes_proc_diferentes.rename(columns={"valor_pago": "repeticoes"})

    # Agrupando todas as descrições possíveis para cada código
    proc_diferentes = df_append_all[['cod_tuss', 'proc_operadora', 'operadora']].groupby(['cod_tuss', 'proc_operadora', 'operadora']).nunique().reset_index()
    # proc_diferentes = proc_diferentes.reset_index()

    # Juntando cada descrição possível com a sua quantidade
    proc_diferentes = proc_diferentes.set_index('cod_tuss').merge(qtd_proc_diferentes.set_index('cod_tuss'), how='left', on=['cod_tuss', 'operadora']).reset_index().dropna()
    # proc_diferentes = proc_diferentes.dropna()

    # Juntando cada descrição possível com a sua quantidade e com o número de repetições
    proc_diferentes = proc_diferentes.set_index('cod_tuss').merge(repeticoes_proc_diferentes[['cod_tuss', 'proc_operadora', 'repeticoes', 'operadora']].set_index('cod_tuss'), how='left', on=['cod_tuss', 'proc_operadora']).drop_duplicates().reset_index()
    proc_diferentes['qtd_proc_diferentes'] = proc_diferentes['qtd_proc_diferentes'].astype(int)
    proc_diferentes = proc_diferentes.drop_duplicates().reset_index()

    if filter_insurance == 'Todas':
        insurance_type_filter = proc_diferentes
    else:
        insurance_type_filter = proc_diferentes
    #     insurance_type_filter = proc_diferentes[proc_diferentes['operadora'] == filter_insurance]

    proc_diferentes = insurance_type_filter
    proc_list = [79320856,
79320856,
79320325,
79320325,
79320325,
79220479,
79220479,
79220371,
79220371,
79220339,
79220339,
79220312,
79220312,
79219837,
79219837,
79219390,
79219390,
79214770,
79214770,
79214762,
79214762,
79214312,
79214312,
79208142,
79208142,
79197680,
79197680,
79196144,
79196144,
79119182,
79119182,
79119166,
79119166,
79101039,
79101039,
790486,
790486,
789925,
789925,
78987717,
78987717,
78987717,
78987482,
78987482,
78987474,
78987474,
78987474,
78987440,
78987440,
78987253,
78987253,
78987121,
78987121,
78986877,
78986877,
78986427,
78986427,
78986400,
78986400,
78986338,
78986338,
78986273,
78986273,
78986265,
78986265,
78986249,
78986249,
78986249,
78986184,
78986184,
78985102,
78985102,
78861608,
78861608,
78861586,
78861586,
78516021,
78516021,
78516005,
78516005,
78516005,
78515998,
78515998,
78515980,
78515980,
78515980,
78515963,
78515963,
78515963,
78515955,
78515955,
78515955,
78515947,
78515947,
77971787,
77971787,
776360,
776360,
77261,
77261,
771600,
771600,
771562,
771562,
769,
769,
762172,
762172,
749397,
749397,
749206,
749206,
749168,
749168,
74316893,
74316893,
74268970,
74268970,
74268910,
74268910,
74268902,
74268902,
740799,
740799,
740799,
740799,
740799,
73938,
73938,
73938,
737275,
737275,
737267,
737267,
736376,
736376,
736287,
736287,
719048,
719048,
718645,
718645,
718645,
71587527,
71587527,
71519653,
71519653,
71484175,
71484175,
71484159,
71484159,
71185,
71185,
71113983,
71113983,
70905096,
70905096,
70905053,
70905053,
70905010,
70905010,
70859086,
70859086,
70859043,
70859043,
70858802,
70858802,
70852600,
70852600,
70852588,
70852588,
70852570,
70852570,
70852570,
70852308,
70852308,
70852251,
70852251,
70852057,
70852057,
70851840,
70851840,
70851840,
70851832,
70851832,
70851824,
70851824,
70851824,
70851808,
70851808,
70851794,
70851794,
70851794,
70850186,
70850186,
70850178,
70850178,
70850160,
70850160,
70849323,
70849323,
70849323,
70849250,
70849250,
70849250,
70847096,
70847096,
70847096,
70799172,
70799172,
70765588,
70765588,
70765570,
70765570,
70765561,
70765561,
70765553,
70765553,
70705356,
70705356,
70705348,
70705348,
70705348,
70705348,
70705330,
70705330,
70705330,
70705321,
70705321,
70705313,
70705313,
70705313,
70705305,
70705305,
70705291,
70705291,
70705283,
70705283,
70704880,
70704880,
70704414,
70704414,
70704414,
70704392,
70704392,
70704392,
70568456,
70568456,
70369526,
70369526,
70369526,
70361118,
70361118,
70361096,
70361096,
70361070,
70361070,
70361045,
70361045,
70361010,
70361010,
70360979,
70360979,
70360944,
70360944,
70360944,
70360910,
70360910,
70360910,
70360880,
70360880,
70360880,
70360812,
70360812,
70360812,
70360782,
70360782,
70360782,
70360758,
70360758,
70360758,
70236739,
70236739,
70236380,
70236380,
70223777,
70223777,
70223769,
70223769,
70223750,
70223750,
70222851,
70222851,
70222843,
70222843,
70222835,
70222835,
70222800,
70222800,
70222797,
70222797,
70222789,
70222789,
70222770,
70222770,
70193967,
70193967,
70139253,
70139253,
70139245,
70139245,
70139180,
70139180,
70139180,
70139164,
70139164,
70139164,
70139148,
70139148,
70139148,
70139130,
70139130,
70139130,
70139083,
70139083,
70139083,
70139075,
70139075,
70139075,
70139067,
70139067,
70139067,
70139059,
70139059,
70139059,
70139040,
70139040,
70139040,
70139040,
70139032,
70139032,
70139032,
70139024,
70139024,
70139024,
70138982,
70138982,
70138974,
70138974,
70138940,
70138940,
70138931,
70138931,
70138923,
70138923,
70135312,
70135312,
70135290,
70135290,
70135266,
70135266,
70034729,
70034729,
70034710,
70034710,
70034702,
70034702,
70034699,
70034699,
70034664,
70034664,
70034664,
70034656,
70034656,
70034397,
70034397,
70034354,
70034354,
70034214,
70034214,
70034168,
70034168,
70019860,
70019860,
70018294,
70018294,
70018286,
70018286,
70014396,
70014396,
70014388,
70014388,
70014370,
70014370,
70014370,
70014361,
70014361,
70014353,
70014353,
70014353,
70014345,
70014345,
70014337,
70014337,
70014310,
70014310,
70014302,
70014302,
70014280,
70014280,
70014272,
70014272,
70014264,
70014264,
70014248,
70014248,
70014221,
70014221,
70014205,
70014205,
70014191,
70014191]

    proc_diferentes = proc_diferentes.drop(proc_diferentes[proc_diferentes.cod_tuss == "10101012"].index)
    proc_diferentes = proc_diferentes.drop(proc_diferentes[proc_diferentes.cod_tuss == "101017618"].index)
    proc_diferentes = proc_diferentes.drop(proc_diferentes[proc_diferentes.cod_tuss == "108332"].index)
    proc_diferentes = proc_diferentes.drop(proc_diferentes[proc_diferentes.cod_tuss == "108101"].index)
    proc_diferentes = proc_diferentes.drop(proc_diferentes[proc_diferentes.cod_tuss == "113069"].index)
    proc_diferentes = proc_diferentes[~proc_diferentes['cod_tuss'].astype(int).isin(proc_list)]
    return proc_diferentes