import streamlit as st
from st_files_connection import FilesConnection

import pandas as pd

from functions.proc_diferentes import proc_diferentes_func

from PIL import Image
import xlsxwriter
from io import BytesIO

st.set_page_config(
     page_title="Auditoria Beta",
     page_icon="üèóÔ∏è",
 )

# st.cache_resource.clear()

conn = st.experimental_connection('s3', type=FilesConnection)

@st.cache_data(ttl=3600, show_spinner="1/4 - Carregando base completa...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_1():
    return conn.read("df-for-mvps/6/290/mai-2024/df_append_all.csv", input_format="csv")
#     return pd.read_csv("../dados/df_append_all.csv")

df_append_all = get_data_1()

# @st.cache_data(ttl=3600, show_spinner="2/4 - Carregando hist√≥rico...") #Ler base com a classifica√ß√£o TUSS da ANS
# def get_data_2():
#     return conn.read("df-for-mvps/6/290/mai-2024/df_append.csv", input_format="csv")
# #     return pd.read_csv('../dados/df_append.csv')
    
# df_append = get_data_2()

# df_append = df_append_all.dropna()

# df_append["cod_tuss"] = df_append["cod_tuss"].astype(int).astype(str)
df_append_all = df_append_all.drop(df_append_all[df_append_all.cod_tuss == "0000MS2B"].index)
df_append_all["cod_tuss"] = df_append_all["cod_tuss"].astype(int).astype(str)

st.markdown("# C√≥digos com descri√ß√µes diferentes")
st.sidebar.markdown("# C√≥digos com descri√ß√µes diferentes")

st.markdown('Ainda, c√≥digos que receberam mais de uma descri√ß√£o diferente dentro da mesma base tamb√©m fazem parte da classifica√ß√£o de poss√≠veis falhas ao divulgar hist√≥rico dos sinistros.')

filter_date = st.sidebar.selectbox(label='Selecione o per√≠odo', options=['Toda a base'])

if filter_date == 'Mar/2023':
    min_date = '2023-03-01'
    max_date = '2023-03-31'
elif filter_date == 'Fev/2023':
    min_date = '2023-02-01'
    max_date = '2023-02-31'
elif filter_date == 'Jan/2023':
    min_date = '2023-01-01'
    max_date = '2023-01-31'
elif filter_date == 'Dez/2022':
    min_date = '2022-12-01'
    max_date = '2022-12-31'
elif filter_date == 'Nov/2022':
    min_date = '2022-1-01'
    max_date = '2022-11-31'
elif filter_date == 'Out/2022':
    min_date = '2022-10-01'
    max_date = '2022-10-31'
elif filter_date == 'Set/2022':
    min_date = '2022-09-01'
    max_date = '2022-09-31'
elif filter_date == 'Ago/2022':
    min_date = '2022-08-01'
    max_date = '2022-08-31'
elif filter_date == 'Jul/2022':
    min_date = '2022-07-01'
    max_date = '2022-07-31'
elif filter_date == 'Jun/2022':
    min_date = '2022-06-01'
    max_date = '2022-06-31'
elif filter_date == 'Mai/2022':
    min_date = '2022-05-01'
    max_date = '2022-05-31'
elif filter_date == 'Abr/2022':
    min_date = '2022-04-01'
    max_date = '2022-04-31'
elif filter_date == 'Mar/2022':
    min_date = '2022-03-01'
    max_date = '2022-03-31'
elif filter_date == 'Fev/2022':
    min_date = '2022-02-01'
    max_date = '2022-02-31'
elif filter_date == 'Jan/2022':
    min_date = '2022-01-01'
    max_date = '2022-01-31'
elif filter_date == '2022':
    min_date = '2022-01-01'
    max_date = '2022-12-31'
elif filter_date == '2023':
    min_date = '2023-01-01'
    max_date = '2023-12-31'
else:
    min_date = '2018-12-01'
    max_date = '2022-11-30'

insurance_option = df_append_all['operadora'].unique().tolist()

if len(insurance_option) > 1:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=['Todas', insurance_option[0], insurance_option[1]])
else:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=[insurance_option[0]])

image = conn.open("df-for-mvps/6/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=110)

image = conn.open("df-for-mvps/6/290/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=50)

st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')


st.sidebar.caption('Constru√≠do com üß† por Blue AI')

# 2 Procedimentos diferentes ou com descri√ß√£o diferente da pr√≥pria base, para o mesmo c√≥digo
proc_diferentes = proc_diferentes_func(df_append_all, filter_insurance)
proc_diferentes = proc_diferentes[['cod_tuss', 'proc_operadora', 'qtd_proc_diferentes', 'repeticoes', 'operadora_y']]

total = len(proc_diferentes)

if total == 1:
    # st.error('**Aten√ß√£o.** \n\n A Blue encontrou alguma(s) suspeita(s) de fraude com os gastos do plano de sa√∫de, para o per√≠odo selecionado. Confira abaixo quais s√£o as suspeitas.', icon="üö®")
    st.write('###### Foi encontrado', total, 'procedimento diferente ou com descri√ß√£o diferente da pr√≥pria base, para o mesmo c√≥digo, em todo o hist√≥rico.')

    proc_diferentes = proc_diferentes.rename(columns={"proc_operadora": "Descri√ß√£o", "qtd_proc_diferentes": "Quantidade de descri√ß√µes diferentes", "repeticoes": "Repeti√ß√µes", 'operadora_y': 'Operadora'})
    proc_diferentes = proc_diferentes[['cod_tuss', 'Descri√ß√£o', 'Quantidade de descri√ß√µes diferentes', 'Repeti√ß√µes', 'Operadora']]
    proc_diferentes
    


    def to_excel(df):
        output = BytesIO()
        writer = pd.ExcelWriter(output, engine='xlsxwriter')
        proc_diferentes.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        format1 = workbook.add_format({'num_format': '0.00'}) 
        worksheet.set_column('A:A', None, format1)  
        writer.close()
        processed_data = output.getvalue()
        return processed_data
    df_xlsx = to_excel(proc_diferentes)
    st.download_button(label='üì• Baixar Planilha',
                                    data=df_xlsx ,
                                    file_name= 'codigos_com_descricoes_diferentes.xlsx')
elif total > 1:
    # st.error('**Aten√ß√£o.** \n\n A Blue encontrou alguma(s) suspeita(s) de fraude com os gastos do plano de sa√∫de, para o per√≠odo selecionado. Confira abaixo quais s√£o as suspeitas.', icon="üö®")
    st.write('###### Foram encontrados', total, 'procedimentos diferentes ou com descri√ß√£o diferente da pr√≥pria base, para o mesmo c√≥digo, em todo o hist√≥rico.')

    proc_diferentes = proc_diferentes.rename(columns={"proc_operadora": "Descri√ß√£o", "qtd_proc_diferentes": "Quantidade de descri√ß√µes diferentes", "repeticoes": "Repeti√ß√µes", 'operadora_y': 'Operadora'})
    proc_diferentes = proc_diferentes[['cod_tuss', 'Descri√ß√£o', 'Quantidade de descri√ß√µes diferentes', 'Repeti√ß√µes', 'Operadora']]
    proc_diferentes

    def to_excel(df):
        output = BytesIO()
        writer = pd.ExcelWriter(output, engine='xlsxwriter')
        proc_diferentes.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        format1 = workbook.add_format({'num_format': '0.00'}) 
        worksheet.set_column('A:A', None, format1)  
        writer.close()
        processed_data = output.getvalue()
        return processed_data
    df_xlsx = to_excel(proc_diferentes)
    st.download_button(label='üì• Baixar Planilha',
                                    data=df_xlsx ,
                                    file_name= 'codigos_com_descricoes_diferentes.xlsx')

else:
    st.info('Nenhum alerta de poss√≠vel inconsist√™ncia foi encontrado para esse per√≠odo. \n\n**Uma notifica√ß√£o te avisar√° se algo diferente acontecer.**', icon="üåü")

if total > 0:
    '''----'''

    st.write('\n\n')

    st.markdown('## üí° A√ß√µes recomendadas e boas pr√°ticas')

    st.markdown('Ao lidar com procedimentos pagos pelo plano de sa√∫de em que procedimentos com descri√ß√µes diferentes recebem a mesma identifica√ß√£o, considere as seguintes boas pr√°ticas:')

    st.write('\n\n')

    st.markdown('##### 1. Documentar e evidenciar as diferen√ßas:')
    st.markdown('Mantenha registros detalhados dos procedimentos realizados, incluindo descri√ß√µes, datas e outros detalhes relevantes. O objetivo dessa aplica√ß√£o √© automatizar essa busca e te mostrar a quantidade de descri√ß√µes diferentes encontradas para cada c√≥digo, junto com a quantidade de repeti√ß√µes de uma mesma descri√ß√£o para o respectivo c√≥digo.')

    st.markdown('##### 2. Entrar em contato com o plano de sa√∫de:')
    st.markdown('Informe o plano de sa√∫de sobre a quest√£o, explicando que diferentes procedimentos est√£o sendo identificados de maneira inadequada. Forne√ßa exemplos espec√≠ficos e pe√ßa ao plano para revisar e corrigir a identifica√ß√£o dos procedimentos na fatura.')

    st.markdown('##### 3. Pesquisar a tabela da ANS:')
    st.markdown('Caso o c√≥digo levantado seja um c√≥digo TUSS, consulte a tabela de procedimentos da ANS dispon√≠vel em seu site para identificar o c√≥digo em quest√£o e suas devidas descri√ß√µes correspondentes aos procedimentos realizados. Essa pesquisa pode ajudar a ter uma refer√™ncia clara dos procedimentos e auxiliar na comunica√ß√£o com o plano de sa√∫de.')

    st.markdown('##### 4. Solicitar uma revis√£o e corre√ß√£o:')
    st.markdown('Formalize um pedido por escrito para que o plano de sa√∫de ou o prestador de servi√ßos m√©dicos revisem e corrijam a identifica√ß√£o inadequada dos procedimentos. Inclua todos os detalhes relevantes e evid√™ncias documentais que comprovem a diferen√ßa entre os procedimentos.')

    st.write('\n\n')

    st.warning('Lembre-se de que cada situa√ß√£o pode ser √∫nica, e √© importante manter uma comunica√ß√£o clara e documentada com o o plano de sa√∫de. Registrar todas as intera√ß√µes, manter c√≥pias de documentos e buscar assist√™ncia profissional, se necess√°rio, pode ser √∫til ao resolver esse problema.')
else:
    pass