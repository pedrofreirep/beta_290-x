import streamlit as st
from st_files_connection import FilesConnection

import pandas as pd
import numpy as np

from functions.bene_sem_id import bene_sem_id_func
from functions.upper_outliers_nivel_provedor import proc_preco_nivel_provedor_func
from functions.upper_outliers_nivel_provedor import upper_outliers_nivel_provedor_func
from functions.proc_diferentes import proc_diferentes_func
from functions.sem_tuss import sem_tuss_func
from functions.proc_duplicados import proc_duplicados_func
from functions.prest_sem_id import prest_sem_id_func
from functions.proc_sex import proc_male_func
from functions.proc_sex import proc_fem_func
from functions.sessoes_outliers import psico_func
from functions.sessoes_outliers import fono_func
from functions.proc_duplicados_por_provedor import proc_duplicados_por_provedor_func
from functions.quebra_recibo import quebra_recibo_jan_23_func, quebra_recibo_fev_23_func, quebra_recibo_mar_23_func, quebra_recibo_jan_22_func, quebra_recibo_fev_22_func, quebra_recibo_mar_22_func, quebra_recibo_abr_22_func, quebra_recibo_mai_22_func, quebra_recibo_jun_22_func, quebra_recibo_jul_22_func, quebra_recibo_ago_22_func, quebra_recibo_set_22_func, quebra_recibo_out_22_func, quebra_recibo_nov_22_func, quebra_recibo_dez_22_func

import time
from PIL import Image
import datetime
from datetime import date

import plotly.graph_objects as go
import plotly.express as px
# import zipfile

st.set_page_config(
     page_title="Auditoria Beta",
     page_icon="üèóÔ∏è",
 )

# st.cache_resource.clear() 

conn = st.experimental_connection('s3', type=FilesConnection)

@st.cache_data(ttl=24*3600, show_spinner="1/3 - Carregando base completa...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_1():
    return conn.read("df-for-mvps/6/290/mai-2024/df_append_all.csv", input_format="csv")
#     return pd.read_csv("../dados/df_append_all.csv")

df_append_all = get_data_1()

# @st.cache_data(ttl=24*3600, show_spinner="2/4 - Carregando hist√≥rico...") #Ler base com a classifica√ß√£o TUSS da ANS
# def get_data_2():
#     return conn.read("df-for-mvps/6/290/mai-2024/df_append.csv", input_format="csv")
# #     return pd.read_csv('../dados/df_append.csv')
    
# df_append = get_data_2()

# df_append = df_append_all.dropna()

@st.cache_data(ttl=24*3600, show_spinner="2/3 - Analisando procedimentos...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_3():
    return conn.read("df-for-mvps/6/290/mai-2024/proc_describe.csv", input_format="csv")
#     return pd.read_csv('/Users/pedro/Documents/Blue/ds/df_sulamerica_describe.csv')
    
proc_describe = get_data_3()

proc_describe = proc_describe.iloc[1:]

# zf = zipfile.ZipFile('cod_tuss_subgrupo_classe_2022_ponto_e_virgula.csv.zip') 

@st.cache_data(ttl=3600, show_spinner="3/3 - Carregando c√≥digos TUSS...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_4():
    return conn.read("df-for-mvps/tuss/cod_tuss_subgrupo_classe_2022_ponto_e_virgula 2.csv", input_format="csv")
	# return pd.read_csv(zf.open('cod_tuss_subgrupo_classe_2022_ponto_e_virgula.csv'))

df_subgrupo = get_data_4()

df_append_all = df_append_all.drop(df_append_all[df_append_all.cod_tuss == "0000MS2B"].index)
df_append_all["cod_tuss"] = df_append_all["cod_tuss"].astype(int).astype(str)
df_subgrupo["cod_tuss"] = df_subgrupo["cod_tuss"].astype(int).astype(str)
proc_describe["cod_tuss"] = proc_describe["cod_tuss"].astype(int).astype(str)

proc_describe["outlier_range"] = proc_describe["outlier_range"].round(decimals = 0)

df_append_all["dt_utilizacao"] = pd.to_datetime(df_append_all['dt_utilizacao'], dayfirst=False, errors='coerce')

df_append_all["mes_utilizacao"] = df_append_all["mes_utilizacao"].fillna(0).astype(int)
df_append_all["ano_utilizacao"] = df_append_all["ano_utilizacao"].fillna(0).astype(int)

df_append_all["valor_pago"] = df_append_all["valor_pago"].astype(float)

df_append_all['mes_utilizacao'] = df_append_all['mes_utilizacao'].fillna(0).astype(int).astype(str)
df_append_all['ano_utilizacao'] = df_append_all['ano_utilizacao'].fillna(0).astype(int)

df_append_all['operadora'] = df_append_all['operadora'].astype(str)

df_append_all['id_pessoa'] = df_append_all['id_pessoa'].astype(int).astype(str)

# Configurando sidebar
st.sidebar.markdown("# An√°lise da sinistralidade")

# filter_date = st.sidebar.selectbox(label='Selecione o per√≠odo', options=['2023'])
filter_date = st.sidebar.selectbox(label='Selecione o per√≠odo', options=['2023'])

if filter_date == '2024':
    min_date = pd.to_datetime('2024-01-01')
    max_date = pd.to_datetime('2024-12-31')
elif filter_date == '2023':
    min_date = pd.to_datetime('2023-01-01')
    max_date = pd.to_datetime('2023-12-31')
elif filter_date == 'Per√≠odo de reajuste':
    min_date = pd.to_datetime('2022-10-01')
    max_date = pd.to_datetime('2023-03-31') # Reajuste vai at√© outubro 2023-10-31
elif filter_date == '√öltimos 12 meses':
    min_date = pd.to_datetime('2022-04-01')
    max_date = pd.to_datetime('2023-03-31')

# filter_insurance = 'Todas'

insurance_option = df_append_all['operadora'].unique().tolist()

if len(insurance_option) > 1:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=['Todas', insurance_option[0], insurance_option[1]])
else:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=[insurance_option[0]])

image = conn.open("df-for-mvps/6/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=110)

image = conn.open("df-for-mvps/6/290/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=50)

st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')


st.sidebar.caption('Constru√≠do com üß† por Blue AI')

st.markdown("# üí∞ Resumo do impacto nas despesas e poss√≠veis economias, para " + filter_date)

st.markdown('A seguir, na ***se√ß√£o 1*** s√£o apresentados os principais t√≥picos sobre an√°lise de gastos e utiliza√ß√µes indevidas com o plano de sa√∫de que podem ser reduzidas por auditoria de gastos. Ainda, a ***se√ß√£o 2*** mostra tamb√©m as poss√≠veis falhas de classifica√ß√£o que mais interferem na interpreta√ß√£o e an√°lise dos dados. **Aproveite as recomenda√ß√µes para lidar melhor com cada contexto apresentado.**')


# 1 Benefici√°rio sem identifica√ß√£o
# bene_sem_id = bene_sem_id_func(df_append_all, filter_insurance, min_date, max_date)


# 2 Procedimentos diferentes ou com descri√ß√£o diferente da pr√≥pria base, para o mesmo c√≥digo
# proc_diferentes = proc_diferentes_func(df_append_all, filter_insurance)


# 3 C√≥digos sem padr√£o TUSS ou sem identifica√ß√£o
sem_tuss = sem_tuss_func(df_append_all, filter_insurance, max_date, min_date)


# 4 Benefici√°rios com os mesmos procedimentos, para o mesmo prestador e no mesmo dia
# proc_duplicados = proc_duplicados_func(df_append_all, proc_describe, filter_insurance, max_date, min_date)


# 5 Analisando o padr√£o do pre√ßo de procedimentos
proc_preco_nivel_provedor = proc_preco_nivel_provedor_func()
upper_outliers_nivel_provedor = upper_outliers_nivel_provedor_func(df_append_all.dropna(), df_subgrupo, proc_preco_nivel_provedor, filter_insurance, max_date, min_date)


# 6 Prestador sem identifica√ß√£o
# prest_sem_id = prest_sem_id_func(df_append_all, filter_insurance, max_date, min_date)


# 7 Benefici√°rios que realizaram procedimentos indevidos para o seu sexo, no √∫ltimo ano
# df_fem = proc_fem_func(df_append_all.dropna())
# df_male = proc_male_func(df_append_all.dropna())


# 8 Quebra de recibo

# Criando m√©dia do valor pago por cada sinistro para identificar quebra do recibo dividia em 2 meses consecutivos
media_para_quebra = proc_preco_nivel_provedor[['cod_tuss', 'provedor', 'pre√ßo_limite']]
media_para_quebra = media_para_quebra.rename(columns={"pre√ßo_limite": "valor_medio"})

media_para_quebra.loc[:, "cod_tuss"] = media_para_quebra["cod_tuss"].astype(int).astype(str)

df_append_all_amb = df_append_all[df_append_all['cod_tuss'] == '10101012']

df_append_all_amb.loc[:, "mes_utilizacao"] = df_append_all_amb["mes_utilizacao"].astype(int).astype(str)

# Iniciando classifica√ß√£o de quebra de recibo para Janeiro, com primeira parcela em Dezembro do ano anterior
if filter_date == 'Jan/2023':
    quebra_recibos_jan_23 = quebra_recibo_jan_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jan_23['valor_pago'] = quebra_recibos_jan_23['valor_pago'].astype(float)
elif filter_date == 'Fev/2023':
    quebra_recibos_fev_23 = quebra_recibo_fev_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev_23['valor_pago'] = quebra_recibos_fev_23['valor_pago'].astype(float)
elif filter_date == 'Mar/2023':
    quebra_recibos_mar_23 = quebra_recibo_mar_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar_23['valor_pago'] = quebra_recibos_mar_23['valor_pago'].astype(float)
elif filter_date == 'Jan/2022':
    quebra_recibos_jan = quebra_recibo_jan_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jan['valor_pago'] = quebra_recibos_jan['valor_pago'].astype(float)
elif filter_date == 'Fev/2022':
    quebra_recibos_fev = quebra_recibo_fev_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev['valor_pago'] = quebra_recibos_fev['valor_pago'].astype(float)
elif filter_date == 'Mar/2022':
    quebra_recibos_mar = quebra_recibo_mar_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar['valor_pago'] = quebra_recibos_mar['valor_pago'].astype(float)
elif filter_date == 'Abr/2022':
    quebra_recibos_abr = quebra_recibo_abr_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_abr['valor_pago'] = quebra_recibos_abr['valor_pago'].astype(float)
elif filter_date == 'Mai/2022':
    quebra_recibos_mai = quebra_recibo_mai_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mai['valor_pago'] = quebra_recibos_mai['valor_pago'].astype(float)
elif filter_date == 'Jun/2022':
    quebra_recibos_jun = quebra_recibo_jun_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jun['valor_pago'] = quebra_recibos_jun['valor_pago'].astype(float)
elif filter_date == 'Jul/2022':
    quebra_recibos_jul = quebra_recibo_jul_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jul['valor_pago'] = quebra_recibos_jul['valor_pago'].astype(float)
elif filter_date == 'Ago/2022':
    quebra_recibos_ago = quebra_recibo_ago_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_ago['valor_pago'] = quebra_recibos_ago['valor_pago'].astype(float)
elif filter_date == 'Set/2022':
    quebra_recibos_set = quebra_recibo_set_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_set['valor_pago'] = quebra_recibos_set['valor_pago'].astype(float)
elif filter_date == 'Out/2022':
    quebra_recibos_out = quebra_recibo_out_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_out['valor_pago'] = quebra_recibos_out['valor_pago'].astype(float)
elif filter_date == 'Nov/2022':
    quebra_recibos_nov = quebra_recibo_nov_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_nov['valor_pago'] = quebra_recibos_nov['valor_pago'].astype(float)
elif filter_date == 'Dez/2022':
    quebra_recibos_dez = quebra_recibo_dez_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_dez['valor_pago'] = quebra_recibos_dez['valor_pago'].astype(float)
elif filter_date == '2023':
    quebra_recibos_jan_23 = quebra_recibo_jan_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev_23 = quebra_recibo_fev_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar_23 = quebra_recibo_mar_23_func(media_para_quebra, df_append_all_amb)

    quebra_recibos_jan_23['valor_pago'] = quebra_recibos_jan_23['valor_pago'].astype(float)
    quebra_recibos_fev_23['valor_pago'] = quebra_recibos_fev_23['valor_pago'].astype(float)
    quebra_recibos_mar_23['valor_pago'] = quebra_recibos_mar_23['valor_pago'].astype(float)
elif filter_date == 'Per√≠odo de reajuste':
    quebra_recibos_jan_23 = quebra_recibo_jan_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev_23 = quebra_recibo_fev_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar_23 = quebra_recibo_mar_23_func(media_para_quebra, df_append_all_amb)

    quebra_recibos_out = quebra_recibo_out_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_nov = quebra_recibo_nov_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_dez = quebra_recibo_dez_22_func(media_para_quebra, df_append_all_amb)

    quebra_recibos_jan_23['valor_pago'] = quebra_recibos_jan_23['valor_pago'].astype(float)
    quebra_recibos_fev_23['valor_pago'] = quebra_recibos_fev_23['valor_pago'].astype(float)
    quebra_recibos_mar_23['valor_pago'] = quebra_recibos_mar_23['valor_pago'].astype(float)

    quebra_recibos_out['valor_pago'] = quebra_recibos_out['valor_pago'].astype(float)
    quebra_recibos_nov['valor_pago'] = quebra_recibos_nov['valor_pago'].astype(float)
    quebra_recibos_dez['valor_pago'] = quebra_recibos_dez['valor_pago'].astype(float)
elif filter_date == '√öltimos 12 meses':
    quebra_recibos_jan_23 = quebra_recibo_jan_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev_23 = quebra_recibo_fev_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar_23 = quebra_recibo_mar_23_func(media_para_quebra, df_append_all_amb)

    quebra_recibos_abr = quebra_recibo_abr_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mai = quebra_recibo_mai_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jun = quebra_recibo_jun_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jul = quebra_recibo_jul_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_ago = quebra_recibo_ago_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_set = quebra_recibo_set_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_out = quebra_recibo_out_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_nov = quebra_recibo_nov_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_dez = quebra_recibo_dez_22_func(media_para_quebra, df_append_all_amb)

    quebra_recibos_jan_23['valor_pago'] = quebra_recibos_jan_23['valor_pago'].astype(float)
    quebra_recibos_fev_23['valor_pago'] = quebra_recibos_fev_23['valor_pago'].astype(float)
    quebra_recibos_mar_23['valor_pago'] = quebra_recibos_mar_23['valor_pago'].astype(float)

    quebra_recibos_abr['valor_pago'] = quebra_recibos_abr['valor_pago'].astype(float)
    quebra_recibos_mai['valor_pago'] = quebra_recibos_mai['valor_pago'].astype(float)
    quebra_recibos_jun['valor_pago'] = quebra_recibos_jun['valor_pago'].astype(float)
    quebra_recibos_jul['valor_pago'] = quebra_recibos_jul['valor_pago'].astype(float)
    quebra_recibos_ago['valor_pago'] = quebra_recibos_ago['valor_pago'].astype(float)
    quebra_recibos_set['valor_pago'] = quebra_recibos_set['valor_pago'].astype(float)
    quebra_recibos_out['valor_pago'] = quebra_recibos_out['valor_pago'].astype(float)
    quebra_recibos_nov['valor_pago'] = quebra_recibos_nov['valor_pago'].astype(float)
    quebra_recibos_dez['valor_pago'] = quebra_recibos_dez['valor_pago'].astype(float)
else:
    quebra_recibos_jan = quebra_recibo_jan_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev = quebra_recibo_fev_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar = quebra_recibo_mar_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_abr = quebra_recibo_abr_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mai = quebra_recibo_mai_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jun = quebra_recibo_jun_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jul = quebra_recibo_jul_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_ago = quebra_recibo_ago_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_set = quebra_recibo_set_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_out = quebra_recibo_out_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_nov = quebra_recibo_nov_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_dez = quebra_recibo_dez_22_func(media_para_quebra, df_append_all_amb)

    quebra_recibos_jan['valor_pago'] = quebra_recibos_jan['valor_pago'].astype(float)
    quebra_recibos_fev['valor_pago'] = quebra_recibos_fev['valor_pago'].astype(float)
    quebra_recibos_mar['valor_pago'] = quebra_recibos_mar['valor_pago'].astype(float)
    quebra_recibos_abr['valor_pago'] = quebra_recibos_abr['valor_pago'].astype(float)
    quebra_recibos_mai['valor_pago'] = quebra_recibos_mai['valor_pago'].astype(float)
    quebra_recibos_jun['valor_pago'] = quebra_recibos_jun['valor_pago'].astype(float)
    quebra_recibos_jul['valor_pago'] = quebra_recibos_jul['valor_pago'].astype(float)
    quebra_recibos_ago['valor_pago'] = quebra_recibos_ago['valor_pago'].astype(float)
    quebra_recibos_set['valor_pago'] = quebra_recibos_set['valor_pago'].astype(float)
    quebra_recibos_out['valor_pago'] = quebra_recibos_out['valor_pago'].astype(float)
    quebra_recibos_nov['valor_pago'] = quebra_recibos_nov['valor_pago'].astype(float)
    quebra_recibos_dez['valor_pago'] = quebra_recibos_dez['valor_pago'].astype(float)

# 9 Benefici√°rios com sess√µes acima do comum
# Filrando o n√∫mero de repeti√ß√µes de sinistros de psicoterapia para maior que 48
# psicoterapia_ultimo_ano = psico_func(df_append_all.dropna())

# Filrando o n√∫mero de repeti√ß√µes de sinistros de fonoaudiologia para maior que 18
# fonoaudiologia_ultimo_ano = fono_func(df_append_all.dropna())


# 10 Procedimentos, medicamentos, materiais, di√°rias ou taxas repetidos
# Agrupando sinistros para c√°lculo de reepeti√ß√µes

# proc_repetido_b = proc_duplicados_por_provedor_func(df_append_all, df_subgrupo, proc_describe, filter_insurance)

# # Filtro por tipo de classse do sinistro e data selecionada pelo usu√°rio
# proc = len(proc_repetido_b[(proc_repetido_b['repeticoes'] > proc_repetido_b['outlier_range']) & ((proc_repetido_b['classe'] == 'Ambulatoriais')
#                     | (proc_repetido_b['repeticoes'] > proc_repetido_b['outlier_range']) & (proc_repetido_b['classe'] == 'Laboratoriais')
#                     | (proc_repetido_b['repeticoes'] > proc_repetido_b['outlier_range']) & (proc_repetido_b['classe'] == 'Hospitaliza√ß√µes'))
#                     & (proc_repetido_b['dt_utilizacao'] <= max_date) & (proc_repetido_b['dt_utilizacao'] >= min_date)])

# med = len(proc_repetido_b[(proc_repetido_b['repeticoes'] > proc_repetido_b['outlier_range']) & (proc_repetido_b['classe'] == 'Medicamentos') & (proc_repetido_b['dt_utilizacao'] <= max_date) & (proc_repetido_b['dt_utilizacao'] >= min_date)])

# mat = len(proc_repetido_b[(proc_repetido_b['repeticoes'] > proc_repetido_b['outlier_range']) & (proc_repetido_b['classe'] == 'Materiais') & (proc_repetido_b['dt_utilizacao'] <= max_date) & (proc_repetido_b['dt_utilizacao'] >= min_date)])

# ted = len(proc_repetido_b[(proc_repetido_b['repeticoes'] > proc_repetido_b['outlier_range']) & (proc_repetido_b['classe'] == 'Taxas e Di√°rias') & (proc_repetido_b['dt_utilizacao'] <= max_date) & (proc_repetido_b['dt_utilizacao'] >= min_date)])

# todos_sinistro_repetidos = proc_repetido_b[(proc_repetido_b['repeticoes'] > proc_repetido_b['outlier_range']) & (proc_repetido_b['dt_utilizacao'] <= max_date) & (proc_repetido_b['dt_utilizacao'] >= min_date)]


# Somando o total de alertas por t√≥pico

# f_1 = len(bene_sem_id)
# f_1_cost = bene_sem_id['valor_pago'].sum()
# f_2 = len(proc_diferentes)
# f_2_cost = proc_diferentes['valor_pago'].sum()
f_3 = len(sem_tuss)
f_3_cost = sem_tuss['valor_pago'].sum()
# f_4 = len(proc_duplicados)
# f_4_cost = proc_duplicados['valor_pago'].sum()
f_5 = len(upper_outliers_nivel_provedor)
f_5_cost = upper_outliers_nivel_provedor['valor_pago'].sum()
# f_6 = len(prest_sem_id)
# f_6_cost = prest_sem_id['valor_pago'].sum()
# f_7 = len(df_fem.dropna()) + len(df_male.dropna())
# f_7_cost = df_fem['valor_pago'].sum() + df_male['valor_pago'].sum()


if filter_date == 'Dez/2022':
    f_8 = len(quebra_recibos_dez)
    f_8_cost = quebra_recibos_dez['valor_pago'].sum()
elif filter_date == 'Nov/2022':
    f_8 = len(quebra_recibos_nov)
    f_8_cost = quebra_recibos_nov['valor_pago'].sum()
elif filter_date == 'Out/2022':
    f_8 = len(quebra_recibos_out)
    f_8_cost = quebra_recibos_out['valor_pago'].sum()
elif filter_date == 'Set/2022':
    f_8 = len(quebra_recibos_set)
    f_8_cost = quebra_recibos_set['valor_pago'].sum()
elif filter_date == 'Ago/2022':
    f_8 = len(quebra_recibos_ago)
    f_8_cost = quebra_recibos_ago['valor_pago'].sum()
elif filter_date == 'Jul/2022':
    f_8 = len(quebra_recibos_jul)
    f_8_cost = quebra_recibos_jul['valor_pago'].sum()
elif filter_date == 'Jun/2022':
    f_8 = len(quebra_recibos_jun)
    f_8_cost = quebra_recibos_jun['valor_pago'].sum()
elif filter_date == 'Mai/2022':
    f_8 = len(quebra_recibos_mai)
    f_8_cost = quebra_recibos_mai['valor_pago'].sum()
elif filter_date == 'Abr/2022':
    f_8 = len(quebra_recibos_abr)
    f_8_cost = quebra_recibos_abr['valor_pago'].sum()
elif filter_date == 'Mar/2022':
    f_8 = len(quebra_recibos_mar)
    f_8_cost = quebra_recibos_mar['valor_pago'].sum()
elif filter_date == 'Fev/2022':
    f_8 = len(quebra_recibos_fev)
    f_8_cost = quebra_recibos_fev['valor_pago'].sum()
elif filter_date == 'Jan/2022':
    f_8 = len(quebra_recibos_jan)
    f_8_cost = quebra_recibos_jan['valor_pago'].sum()
elif filter_date == 'Mar/2023':
    f_8 = len(quebra_recibos_mar_23)
    f_8_cost = quebra_recibos_mar_23['valor_pago'].sum()
elif filter_date == 'Fev/2023':
    f_8 = len(quebra_recibos_fev_23)
    f_8_cost = quebra_recibos_fev_23['valor_pago'].sum()
elif filter_date == 'Jan/2023':
    f_8 = len(quebra_recibos_jan_23)
    f_8_cost = quebra_recibos_jan_23['valor_pago'].sum()
elif filter_date == '2022':
    f_8 = len(quebra_recibos_jan) + len(quebra_recibos_fev) + len(quebra_recibos_mar) + len(quebra_recibos_abr) + len(quebra_recibos_mai) + len(quebra_recibos_jun) + len(quebra_recibos_jul) + len(quebra_recibos_ago) + len(quebra_recibos_set) + len(quebra_recibos_out) + len(quebra_recibos_nov) + len(quebra_recibos_dez)
    f_8_cost = quebra_recibos_jan['valor_pago'].sum() + quebra_recibos_fev['valor_pago'].sum() + quebra_recibos_mar['valor_pago'].sum() + quebra_recibos_abr['valor_pago'].sum() + quebra_recibos_mai['valor_pago'].sum() + quebra_recibos_jun['valor_pago'].sum() + quebra_recibos_jul['valor_pago'].sum() + quebra_recibos_ago['valor_pago'].sum() + quebra_recibos_set['valor_pago'].sum() + quebra_recibos_out['valor_pago'].sum() + quebra_recibos_nov['valor_pago'].sum() + quebra_recibos_dez['valor_pago'].sum()
elif filter_date == '2023':
    f_8 = len(quebra_recibos_jan_23) + len(quebra_recibos_fev_23) + len(quebra_recibos_mar_23)
    f_8_cost = quebra_recibos_jan_23['valor_pago'].sum() + quebra_recibos_fev_23['valor_pago'].sum() + quebra_recibos_mar_23['valor_pago'].sum()
elif filter_date == 'Per√≠odo de reajuste':
    f_8 = len(quebra_recibos_jan_23) + len(quebra_recibos_fev_23) + len(quebra_recibos_mar_23) + len(quebra_recibos_out) + len(quebra_recibos_nov) + len(quebra_recibos_dez)
    f_8_cost = quebra_recibos_jan_23['valor_pago'].sum() + quebra_recibos_fev_23['valor_pago'].sum() + quebra_recibos_mar_23['valor_pago'].sum() + quebra_recibos_out['valor_pago'].sum() + quebra_recibos_nov['valor_pago'].sum() + quebra_recibos_dez['valor_pago'].sum()
elif filter_date == '√öltimos 12 meses':
    f_8 = len(quebra_recibos_jan_23) + len(quebra_recibos_fev_23) + len(quebra_recibos_mar_23) + len(quebra_recibos_abr) + len(quebra_recibos_mai) + len(quebra_recibos_jun) + len(quebra_recibos_jul) + len(quebra_recibos_ago) + len(quebra_recibos_set) + len(quebra_recibos_out) + len(quebra_recibos_nov) + len(quebra_recibos_dez)
    f_8_cost = quebra_recibos_jan_23['valor_pago'].sum() + quebra_recibos_fev_23['valor_pago'].sum() + quebra_recibos_mar_23['valor_pago'].sum() + quebra_recibos_abr['valor_pago'].sum() + quebra_recibos_mai['valor_pago'].sum() + quebra_recibos_jun['valor_pago'].sum() + quebra_recibos_jul['valor_pago'].sum() + quebra_recibos_ago['valor_pago'].sum() + quebra_recibos_set['valor_pago'].sum() + quebra_recibos_out['valor_pago'].sum() + quebra_recibos_nov['valor_pago'].sum() + quebra_recibos_dez['valor_pago'].sum()
else:
    f_8 = len(quebra_recibos_jan_23) + len(quebra_recibos_fev_23) + len(quebra_recibos_mar_23) + len(quebra_recibos_jan) + len(quebra_recibos_fev) + len(quebra_recibos_mar) + len(quebra_recibos_abr) + len(quebra_recibos_mai) + len(quebra_recibos_jun) + len(quebra_recibos_jul) + len(quebra_recibos_ago) + len(quebra_recibos_set) + len(quebra_recibos_out) + len(quebra_recibos_nov) + len(quebra_recibos_dez)
    f_8_cost = quebra_recibos_jan_23['valor_pago'].sum() + quebra_recibos_fev_23['valor_pago'].sum() + quebra_recibos_mar_23['valor_pago'].sum() + quebra_recibos_jan['valor_pago'].sum() + quebra_recibos_fev['valor_pago'].sum() + quebra_recibos_mar['valor_pago'].sum() + quebra_recibos_abr['valor_pago'].sum() + quebra_recibos_mai['valor_pago'].sum() + quebra_recibos_jun['valor_pago'].sum() + quebra_recibos_jul['valor_pago'].sum() + quebra_recibos_ago['valor_pago'].sum() + quebra_recibos_set['valor_pago'].sum() + quebra_recibos_out['valor_pago'].sum() + quebra_recibos_nov['valor_pago'].sum() + quebra_recibos_dez['valor_pago'].sum()

# f_9 = len(psicoterapia_ultimo_ano) + len(fonoaudiologia_ultimo_ano)
# f_9_cost = df_fem['psicoterapia_ultimo_ano'].sum() + df_male['fonoaudiologia_ultimo_ano'].sum()
# f_10 = len(todos_sinistro_repetidos)
# f_10_cost = todos_sinistro_repetidos['valor_pago'].sum()

total = f_3 + f_5 + f_8 

# Legenda introdut√≥ria sobra o total de alertas para cada t√≥pico

if total > 0:
    '\n\n'
    st.write('##### 1.  Principais utiliza√ß√µes indevidas do plano de sa√∫de')
    st.write('Os t√≥picos nesta se√ß√£o mostram h√°bitos de utiliza√ß√£o dos usu√°rios (benefici√°rios e/ou empresas) que podem ser evitados, corrigidos ou re-planejados para reduzir despesas com o plano de sa√∫de.')
    st.success('**Economia √† vista.** \n\n Os t√≥picos abaixo somam, at√© ent√£o, aproximadamente **80% do total de despesas com utiliza√ß√µes indevidas** pelo plano de sa√∫de.', icon="üí∞")
    st.warning('**Observa√ß√£o.** \n\n Os n√∫meros abaixo s√£o referentes as bases enviadas e ap√≥s as respectivas atualiza√ß√µes. **Os feedbacks levantados ser√£o considerados para atualiza√ß√µes constantes das informa√ß√µes**.', icon="‚ö†Ô∏è")
    '\n\n'
    st.write('###### 1.1. Gastos fora do padr√£o de cada sinistro:')
    st.caption('**Defini√ß√£o:**')
    st.markdown('Cada sinistro, √© avaliado pelo gasto m√©dio e desvio padr√£o do valor pago para cada provedor. Dessa forma, s√£o assinalados neste t√≥pico sinistros que, apresentaram gastos maiores do que soma entre a m√©dia e desvio padr√£o do respectivo procedimento para o mesmo provedor.')
    st.caption('**Impacto:**')
    st.write('Para o per√≠odo em an√°lise,', f_5, 'sinistros ficaram acima do padr√£o de pre√ßo exercido, com isso R$',  f_5_cost.round(2), 'em despesas assistenciais pagas com o plano de sa√∫de podem ser reduzidas se encaminhadas a provedores com pre√ßo de mercado.')
    st.caption('**Recomenda√ß√µes:**')
    st.markdown('Despesas com procedimentos acima do padr√£o de pre√ßo exercido pelo mercado, para aquele mesmo procedimeto, podem ser reduzidas direcionando os usu√°rios para os provedores mais eficientes em pre√ßo e sa√∫de. Apresentar para a empresa quais provedores oferecem servi√ßos em sa√∫de dentro no padr√£o de cobertura do plano, deve ser a atitude mais assertiva para evitar reajustes por gastos exorbitantes.')
    '\n\n'
    if f_8 > 0:
        st.write('###### 1.2. Quebras de recibo:')
        st.caption('**Defini√ß√£o:**')
        st.markdown('A avalia√ß√£o de um alerta por quebra de recibo √© definida pela repeti√ß√£o da conta paga em menos de um m√™s, quando tamb√©m somadas ambas as contas o valor ultrapassa a m√©dia de gastoos do respectivo procedimento. Assim, procedimentos cobrados novamente no m√™s seguinte pelo mesmo provedor tamb√©m podem estar nesse t√≥pico.')
        st.caption('**Impacto:**')
        st.write('Quando provedores come√ßam a ser um dos poss√≠veis fatores de repetic√µes de contas,', f_8, 'sinistros foram realizados pelo mesmo benefici√°rio, em meses subsequentes. Com isso, R$', f_8_cost.round(2), 'representam os gastos com poss√≠veis quebras de recibo.')
        st.caption('**Recomenda√ß√µes:**')
        st.markdown('Para este t√≥pico, √© necess√°rio pesquisar com cuidado o motivo das contas duplicadas, em cada caso. Ainda, pode haver a necessidade de duplicidade para verificar e confirmar o estado de sa√∫de do benefici√°rio, assim como pode haver divis√£o nos valores para que um procedimento possa ser coberto pelo plano. Comece investigando provedores com maiores repeti√ß√µes e busque formas eficientes de lidar com estas despesas.')
        '\n\n'


    st.write('##### 2. Principais poss√≠veis falhas de classifica√ß√£o da operadora')
    st.write('A segunda se√ß√£o de auditoria de sinistros levanta contas que deixam de entregar alguma informa√ß√£o relevante sobre o usu√°rio, sinistro e/ou provedor. Trabalhar em conjunto com a operadora para alinhar tais informa√ß√µes pode trazer descobertas de potenciais economias.')
    st.error('**Aten√ß√£o.** \n\n A principal falha de classifica√ß√£o de sinistros √© representada por **C√≥digos sem identifica√ß√£o** que deixam de mostrar alguma informa√ß√£o relevante sobre o que foi utilizado e gasto.', icon="üö®")
    st.warning('**Observa√ß√£o.** \n\n Foram encontrados diversos formatos de datas na base de sinistros. Formatos de datas diferentes podem interferir nas an√°lises e previs√µes. As datas j√° foram organizadas no mesmo formato e podem alterar os resultados nos pr√≥ximos meses.', icon="‚ö†Ô∏è")
    '\n\n'
    st.write('###### 2.2. C√≥digos sem identifica√ß√£o:')
    st.caption('**Defini√ß√£o:**')
    st.markdown('Procedimentos sem identifica√ß√£o de algum c√≥digo TUSS ou representado pela terminologia da AMB representam sinistros que n√£o est√£o classificados de acordo com o padr√£o previsto pela ANS, segundo o editorial da CBHPM. C√≥digos que nem sequer receberam alguma outra identifica√ß√£o, tamb√©m aparecem nessa classifica√ß√£o.')
    st.caption('**Impacto:**')
    st.write(f_3, 'procedimentos n√£o seguiram o padr√£o de identifica√ß√£o, a soma do valor m√©dio desses procedimentos √∫nicos √© de R$', f_3_cost.round(2), 'em despesas assistenciais pagas com o planos de sa√∫de, em ' + filter_date + '.') 
    st.caption('**Recomenda√ß√µes:**')
    st.markdown('Com a atual norma, pode ser complexo identificar sinistros que n√£o seguem o padr√£o TUSS previsto pela ANS ou pela AMB, uma vez que existem outros procedimentos n√£o classificados pela Ag√™ncia Nacional de Sa√∫de Suplementar (ANS), por√©m ainda sim precisam ser pagos pelos planos de sa√∫de. Caso a recorr√™ncia de algum procedimento sem classifica√ßnao TUSS seja alta, √© recomendado buscar a identifica√ß√£o do mesmo atrav√©s da operadora e assim ser poss√≠vel mapear a utliza√ß√£o do plano de sa√∫de da empresa.')
    '\n\n'
    # st.write('###### 3. C√≥digos com descri√ß√µes diferentes:', f_2)
    # st.markdown('Ainda, c√≥digos que receberam mais de uma descri√ß√£o diferente dentro da mesma base tamb√©m fazem parte da classifica√ß√£o de poss√≠veis falhas ao divulgar hist√≥rico dos sinistros.')
    # '\n\n'
    # st.write('###### 4. Provedores sem identifica√ß√£o:', f_6)
    # st.markdown('Provedores sem qualquer identifica√ß√£o, como CNPJ ou CRM, os quais impossibilitam rastrear a fonte do servi√ßo prestado s√£o classificados neste t√≥pico.')
    # '\n\n'

    # st.write('###### 10. Procedimentos indevidos pelo sexo do benefici√°rio:', f_7)
    # st.markdown('Procedimentos espec√≠ficos do sexo feminino e masculino, se realizados pelo sexo oposto tamb√©m ser√£o indicados nesta classifi√ß√£o de uso indevido do plano de sa√∫de.')
    # '\n\n'
else:
    st.info('Nenhum alerta de potencial fraude foi encontrado para esse per√≠odo. **A Blue te avisar√° se algo diferente acontecer.**', icon="üåü")
