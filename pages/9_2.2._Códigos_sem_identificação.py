import streamlit as st
from st_files_connection import FilesConnection

import pandas as pd

from functions.sem_tuss import sem_tuss_func

from PIL import Image
import xlsxwriter
from io import BytesIO

st.set_page_config(
     page_title="Auditoria Beta",
     page_icon="üèóÔ∏è",
 )

# st.cache_resource.clear()

conn = st.experimental_connection('s3', type=FilesConnection)

@st.cache_data(ttl=3600, show_spinner="1/4 - Carregando base completa...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_1():
    return conn.read("df-for-mvps/6/290/mai-2024/df_append_all.csv", input_format="csv")
#     return pd.read_csv("../dados/df_append_all.csv")

df_append_all = get_data_1()

# @st.cache_data(ttl=3600, show_spinner="2/4 - Carregando hist√≥rico...") #Ler base com a classifica√ß√£o TUSS da ANS
# def get_data_2():
#     return conn.read("df-for-mvps/6/290/mai-2024/df_append.csv", input_format="csv")
# #     return pd.read_csv('../dados/df_append.csv')
    
# df_append = get_data_2()

# df_append = df_append_all.dropna()


# df_append["cod_tuss"] = df_append["cod_tuss"].astype(int).astype(str)
df_append_all = df_append_all.drop(df_append_all[df_append_all.cod_tuss == "0000MS2B"].index)
df_append_all["cod_tuss"] = df_append_all["cod_tuss"].astype(int).astype(str)

# df_append["dt_utilizacao"] = pd.to_datetime(df_append['dt_utilizacao'], format='mixed')
df_append_all["dt_utilizacao"] = pd.to_datetime(df_append_all['dt_utilizacao'], dayfirst=False, errors='coerce')

# df_append["mes_utilizacao"] = df_append["mes_utilizacao"].fillna(0).astype(int)
# df_append["ano_utilizacao"] = df_append["ano_utilizacao"].fillna(0).astype(int)

df_append_all["mes_utilizacao"] = df_append_all["mes_utilizacao"].fillna(0).astype(int)
df_append_all["ano_utilizacao"] = df_append_all["ano_utilizacao"].fillna(0).astype(int)

df_append_all["valor_pago"] = df_append_all["valor_pago"].astype(float)


df_append_all['mes_utilizacao'] = df_append_all['mes_utilizacao'].fillna(0)
df_append_all['mes_utilizacao'] = df_append_all['mes_utilizacao'].astype(int).astype(str)
df_append_all['ano_utilizacao'] = df_append_all['ano_utilizacao'].fillna(0)
df_append_all['ano_utilizacao'] = df_append_all['ano_utilizacao'].astype(int)

df_append_all['operadora'] = df_append_all['operadora'].astype(str)

st.markdown("# C√≥digos sem identifica√ß√£o")
st.sidebar.markdown("# C√≥digos sem identifica√ß√£o")

st.markdown('Sinistros sem identifica√ß√£o de algum c√≥digo TUSS representam sinistros que n√£o est√£o classificados de acordo com o padr√£o previsto pela ANS. C√≥digos que nem sequer receberam alguma outra identifica√ß√£o, tamb√©m aparecem nessa classifica√ß√£o.')

filter_date = st.sidebar.selectbox(label='Selecione o per√≠odo', options=['2024', '2023'])

if filter_date == 'Mar/2023':
    min_date = pd.to_datetime('2023-03-01')
    max_date = pd.to_datetime('2023-03-30')
elif filter_date == 'Fev/2023':
    min_date = pd.to_datetime('2023-02-01')
    max_date = pd.to_datetime('2023-02-28')
elif filter_date == 'Jan/2023':
    min_date = pd.to_datetime('2023-01-01')
    max_date = pd.to_datetime('2023-01-31')
elif filter_date == 'Dez/2022':
    min_date = pd.to_datetime('2022-12-01')
    max_date = pd.to_datetime('2022-12-31')
elif filter_date == 'Nov/2022':
    min_date = pd.to_datetime('2022-11-01', format='%Y-%m-%d')
    max_date = pd.to_datetime('2022-11-30', format='%Y-%m-%d')
elif filter_date == 'Out/2022':
    min_date = pd.to_datetime('2022-10-01')
    max_date = pd.to_datetime('2022-10-31')
elif filter_date == 'Set/2022':
    min_date = pd.to_datetime('2022-09-01')
    max_date = pd.to_datetime('2022-09-30')
elif filter_date == 'Ago/2022':
    min_date = pd.to_datetime('2022-08-01')
    max_date = pd.to_datetime('2022-08-31')
elif filter_date == 'Jul/2022':
    min_date = pd.to_datetime('2022-07-01')
    max_date = pd.to_datetime('2022-07-30')
elif filter_date == 'Jun/2022':
    min_date = pd.to_datetime('2022-06-01')
    max_date = pd.to_datetime('2022-06-30')
elif filter_date == 'Mai/2022':
    min_date = pd.to_datetime('2022-05-01')
    max_date = pd.to_datetime('2022-05-31')
elif filter_date == 'Abr/2022':
    min_date = pd.to_datetime('2022-04-01')
    max_date = pd.to_datetime('2022-04-30')
elif filter_date == 'Mar/2022':
    min_date = pd.to_datetime('2022-03-01')
    max_date = pd.to_datetime('2022-03-31')
elif filter_date == 'Fev/2022':
    min_date = pd.to_datetime('2022-02-01')
    max_date = pd.to_datetime('2022-02-28')
elif filter_date == 'Jan/2022':
    min_date = pd.to_datetime('2022-01-01')
    max_date = pd.to_datetime('2022-01-31')
elif filter_date == '2022':
    min_date = pd.to_datetime('2022-01-01')
    max_date = pd.to_datetime('2022-12-31')
elif filter_date == '2023':
    min_date = pd.to_datetime('2023-01-01')
    max_date = pd.to_datetime('2023-12-31')
else:
    min_date = pd.to_datetime('2018-12-01')
    max_date = pd.to_datetime('2022-12-31')

insurance_option = df_append_all['operadora'].unique().tolist()

if len(insurance_option) > 1:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=['Todas', insurance_option[0], insurance_option[1]])
else:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=[insurance_option[0]])

image = conn.open("df-for-mvps/6/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=110)

image = conn.open("df-for-mvps/6/290/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=50)

st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')


st.sidebar.caption('Constru√≠do com üß† por Blue AI')

# 3 C√≥digos sem padr√£o TUSS ou sem identifica√ß√£o
sem_tuss = sem_tuss_func(df_append_all, filter_insurance, max_date, min_date)

total = len(sem_tuss[((sem_tuss['dt_utilizacao'] <= max_date) & (sem_tuss['dt_utilizacao'] >= min_date))])

if total == 1:
    # st.error('**Aten√ß√£o.** \n\n A Blue encontrou alguma(s) suspeita(s) de fraude com os gastos do plano de sa√∫de, para o per√≠odo selecionado. Confira abaixo quais s√£o as suspeitas.', icon="üö®")
    st.write('###### Foi encontrado', total, 'c√≥digo √∫nico sem padr√£o TUSS ou sem identifica√ß√£o.')
    # st.write('###### 1. Benefici√°rios sem identifica√ß√£o:', total)
    sem_tuss = sem_tuss.rename(columns={"id_pessoa": "ID do usu√°rio", "sexo": "Sexo", "provedor": "Provedor", "cod_tuss": "TUSS", "proc_operadora": "Descri√ß√£o", "dt_utilizacao": "Data", "valor_pago": "Valor pago"})
    sem_tuss = sem_tuss[((sem_tuss['Data'] <= max_date) & (sem_tuss['Data'] >= min_date)) | (sem_tuss['Data'] == '0')]
    sem_tuss
    
#     @st.experimental_memo
#     def convert_df(sem_tuss):
#         return sem_tuss.to_csv(index=False).encode('utf-8')


#     csv = convert_df(sem_tuss)

#     st.download_button(
#         "Baixar planilha",
#         csv,
#         "codigos_sem_identificacao.csv",
#         "text/csv",
#         key='download-csv'
#     )

    def to_excel(df):
        output = BytesIO()
        writer = pd.ExcelWriter(output, engine='xlsxwriter')
        sem_tuss.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        format1 = workbook.add_format({'num_format': '0.00'}) 
        worksheet.set_column('A:A', None, format1)  
        writer.close()
        processed_data = output.getvalue()
        return processed_data
    df_xlsx = to_excel(sem_tuss)
    st.download_button(label='üì• Baixar Planilha',
                                    data=df_xlsx ,
                                    file_name= 'codigos_sem_identificacao.xlsx')
elif total > 1:
    # st.error('**Aten√ß√£o.** \n\n A Blue encontrou alguma(s) suspeita(s) de fraude com os gastos do plano de sa√∫de, para o per√≠odo selecionado. Confira abaixo quais s√£o as suspeitas.', icon="üö®")
    if filter_insurance == 'Paran√° Cl√≠nicas':
        st.warning('**Observa√ß√£o.** \n\n A vers√£o anterior, sem a corre√ß√£o de c√≥digos, somava 1540 procedimentos sem classifica√ß√£o TUSS em 2022, totalizando mais de **200 mil reais**. Ap√≥s a corre√ß√£o parcial restam 298 procedimentos sem classifica√ß√£o, os quais representam aproximadamente **103 mil reais**.', icon="‚ö†Ô∏è")
    else:
        pass
    st.write('###### Foram encontrados', total, 'procedimentos sem padr√£o TUSS ou sem identifica√ß√£o.')
    # st.write('###### 1. Benefici√°rios sem identifica√ß√£o:', total)
    sem_tuss = sem_tuss.rename(columns={"id_pessoa": "ID do usu√°rio", "sexo": "Sexo", "provedor": "Provedor", "cod_tuss": "C√≥digo do procedimento", "proc_operadora": "Descri√ß√£o", "dt_utilizacao": "Data", "valor_pago": "Valor pago", "operadora": "Operadora"})
    sem_tuss = sem_tuss[['C√≥digo do procedimento', 'ID do usu√°rio', 'Descri√ß√£o', 'Provedor', 'Data', 'Valor pago', 'Operadora']]
    sem_tuss = sem_tuss[((sem_tuss['Data'] <= max_date) & (sem_tuss['Data'] >= min_date)) | (sem_tuss['Data'] == '0')]
    sem_tuss
    
#     @st.experimental_memo
#     def convert_df(sem_tuss):
#         return sem_tuss.to_csv(index=False).encode('utf-8')


#     csv = convert_df(sem_tuss)

#     st.download_button(
#         "Baixar planilha",
#         csv,
#         "codigos_sem_identificacao.csv",
#         "text/csv",
#         key='download-csv'
#     )

    def to_excel(df):
        output = BytesIO()
        writer = pd.ExcelWriter(output, engine='xlsxwriter')
        sem_tuss.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        format1 = workbook.add_format({'num_format': '0.00'}) 
        worksheet.set_column('A:A', None, format1)  
        writer.close()
        processed_data = output.getvalue()
        return processed_data
    df_xlsx = to_excel(sem_tuss)
    st.download_button(label='üì• Baixar Planilha',
                                    data=df_xlsx ,
                                    file_name= 'codigos_sem_identificacao.xlsx')
    # st.write((sem_tuss[((sem_tuss['dt_utilizacao'] <= max_date) & (sem_tuss['dt_utilizacao'] >= min_date)) | (sem_tuss['dt_utilizacao'] == '0')]['valor_pago'].sum()) - 864423.24)
else:
    st.info('Nenhum alerta de poss√≠vel inconsist√™ncia foi encontrado para esse per√≠odo. \n\n**Uma notifica√ß√£o te avisar√° se algo diferente acontecer.**', icon="üåü")

'''----'''

st.write('\n\n')

st.markdown('## üí° A√ß√µes recomendadas e boas pr√°ticas')

st.markdown('Ao lidar com procedimentos pagos pelo plano de sa√∫de sem a identifica√ß√£o segundo a Ag√™ncia Nacional de Sa√∫de Suplementar (ANS), aqui est√£o algumas boas pr√°ticas a serem consideradas:')

st.write('\n\n')

st.markdown('##### 1. Entrar em contato com o plano de sa√∫de:')
st.markdown('Entre em contato com o plano de sa√∫de para esclarecer a falta de identifica√ß√£o segundo a ANS nos procedimentos pagos. Explique a situa√ß√£o e questione o motivo da falta de identifica√ß√£o, solicitando informa√ß√µes sobre como o problema pode ser resolvido e os c√≥digos traduzidos.')

st.markdown('##### 2. Pesquisar a tabela da ANS:')
st.markdown('Consulte a tabela de procedimentos da ANS dispon√≠vel em seu site para identificar os c√≥digos e descri√ß√µes correspondentes aos procedimentos realizados. Essa pesquisa pode ajudar a ter uma refer√™ncia clara dos procedimentos e auxiliar na comunica√ß√£o com o plano de sa√∫de. O objetivo dessa aplica√ß√£o √© automatizar essa busca e te mostrar os c√≥digos n√£o encontrados na tabela da ANS, com isso atualiza√ß√µes constantes podem acontecer.')

st.write('\n\n')

st.warning('Lembre-se de que cada situa√ß√£o pode ser √∫nica, e √© importante seguir as regulamenta√ß√µes da ANS. Manter registros detalhados e buscar uma comunica√ß√£o clara e documentada com todas as partes envolvidas √© fundamental para resolver a falta de identifica√ß√£o dos procedimentos e conseguir a tradu√ß√£o de c√≥digos.')
