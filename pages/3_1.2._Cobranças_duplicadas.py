import streamlit as st
from st_files_connection import FilesConnection

import pandas as pd
from PIL import Image

from functions.quebra_recibo import quebra_recibo_jan_23_func, quebra_recibo_fev_23_func, quebra_recibo_mar_23_func, quebra_recibo_abr_23_func, quebra_recibo_mai_23_func, quebra_recibo_jun_23_func, quebra_recibo_jul_23_func, quebra_recibo_ago_23_func, quebra_recibo_set_23_func, quebra_recibo_out_23_func, quebra_recibo_nov_23_func, quebra_recibo_dez_23_func, quebra_recibo_jan_22_func, quebra_recibo_fev_22_func, quebra_recibo_mar_22_func, quebra_recibo_abr_22_func, quebra_recibo_mai_22_func, quebra_recibo_jun_22_func, quebra_recibo_jul_22_func, quebra_recibo_ago_22_func, quebra_recibo_set_22_func, quebra_recibo_out_22_func, quebra_recibo_nov_22_func, quebra_recibo_dez_22_func

from functions.upper_outliers_nivel_provedor import proc_preco_nivel_provedor_func

# import zipfile
import xlsxwriter
from io import BytesIO

st.set_page_config(
     page_title="Auditoria Beta",
     page_icon="üèóÔ∏è",
 )

# st.cache_resource.clear()

conn = st.experimental_connection('s3', type=FilesConnection)

@st.cache_data(ttl=3600, show_spinner="Carregando base completa...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_1():
    return conn.read("df-for-mvps/6/290/mai-2024/df_append_all.csv", input_format="csv")
#     return pd.read_csv("../dados/df_append_all.csv")

df_append_all = get_data_1()

df_append_all = df_append_all.drop(df_append_all[df_append_all.cod_tuss == "0000MS2B"].index)
df_append_all["cod_tuss"] = df_append_all["cod_tuss"].astype(int).astype(str)
df_append_all['cod_tuss'] = df_append_all['cod_tuss'].replace(",",'', regex=True)

df_append_all["dt_utilizacao"] = pd.to_datetime(df_append_all['dt_utilizacao'], dayfirst=False, errors='coerce')

st.markdown("# Analisando poss√≠veis cobran√ßas de retorno, duplicadas ou recorrentes")
st.sidebar.markdown("# Cobran√ßas duplicadas")

st.markdown('Consultas m√©dicas que repetem o valor pago para o mesmo provedor, em dois meses consecutivos, sendo a soma dos dois valores maior que a m√©dia do valor pago por aquele procedimento na base, s√£o alertados como suspeitas por quebras de recibo (caso tal evento tenha sido pago via reembolso) ou poss√≠vel cobran√ßa da consulta de retorno, contr√°ria √† [Resolu√ß√£o n¬∫ 1.958/2010](https://sistemas.cfm.org.br/normas/visualizar/resolucoes/BR/2010/1958) do Conselho Federal de Medicina (CFM) por eventualmente n√£o configurar um novo ato profissional.')

filter_date = st.sidebar.selectbox(label='Selecione o per√≠odo', options=['2023'])



df_append_all['mes_utilizacao'] = df_append_all['mes_utilizacao'].fillna(0).astype(int).astype(str)
df_append_all['ano_utilizacao'] = df_append_all['ano_utilizacao'].fillna(0).astype(int)

df_append_all['id_pessoa'] = df_append_all['id_pessoa'].astype(int).astype(str)

insurance_option = df_append_all['operadora'].unique().tolist()

if len(insurance_option) > 1:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=['Todas', insurance_option[0], insurance_option[1]])
else:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=[insurance_option[0]])

image = conn.open("df-for-mvps/6/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=110)

image = conn.open("df-for-mvps/6/290/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=50)

st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')


st.sidebar.caption('Constru√≠do com üß† por Blue AI')


proc_preco_nivel_provedor = proc_preco_nivel_provedor_func()


# 8 Quebra de recibo

# Criando m√©dia do valor pago por cada sinistro para identificar quebra do recibo dividia em 2 meses consecutivos
media_para_quebra = proc_preco_nivel_provedor[['cod_tuss', 'provedor', 'pre√ßo_limite']]
media_para_quebra = media_para_quebra.rename(columns={"pre√ßo_limite": "valor_medio"})

media_para_quebra.loc[:, "cod_tuss"] = media_para_quebra["cod_tuss"].astype(int).astype(str)

df_append_all_amb = df_append_all[df_append_all['cod_tuss'] == '10101012']

df_append_all_amb.loc[:, "mes_utilizacao"] = df_append_all_amb["mes_utilizacao"].astype(int).astype(str)

# Iniciando classifica√ß√£o de quebra de recibo para Janeiro, com primeira parcela em Dezembro do ano anterior
# Iniciando classifica√ß√£o de quebra de recibo para Janeiro, com primeira parcela em Dezembro do ano anterior
# if filter_date == 'Jan/2023':
#     quebra_recibos_jan_23 = quebra_recibo_jan_23_func(media_para_quebra, df_append_all_amb)
#     # st.write(quebra_recibos_jan_23['valor_pago'].sum())
# elif filter_date == 'Fev/2023':
#     quebra_recibos_fev_23 = quebra_recibo_fev_23_func(media_para_quebra, df_append_all_amb)
#     # st.write(quebra_recibos_fev_23['valor_pago'].sum())
# elif filter_date == 'Mar/2023':
#     quebra_recibos_mar_23 = quebra_recibo_mar_23_func(media_para_quebra, df_append_all_amb)
#     # st.write(quebra_recibos_mar_23['valor_pago'].sum())
# elif filter_date == 'Jan/2022':
#     quebra_recibos_jan = quebra_recibo_jan_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_jan['valor_pago'] = quebra_recibos_jan['valor_pago'].astype(float)
#     # st.write(quebra_recibos_jan['valor_pago'].sum())
# elif filter_date == 'Fev/2022':
#     quebra_recibos_fev = quebra_recibo_fev_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_fev['valor_pago'] = quebra_recibos_fev['valor_pago'].astype(float)
#     # st.write(quebra_recibos_fev['valor_pago'].sum())
# elif filter_date == 'Mar/2022':
#     quebra_recibos_mar = quebra_recibo_mar_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_mar['valor_pago'] = quebra_recibos_mar['valor_pago'].astype(float)
#     # st.write(quebra_recibos_mar['valor_pago'].sum())
# elif filter_date == 'Abr/2022':
#     quebra_recibos_abr = quebra_recibo_abr_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_abr['valor_pago'] = quebra_recibos_abr['valor_pago'].astype(float)
#     # st.write(quebra_recibos_abr['valor_pago'].sum())
# elif filter_date == 'Mai/2022':
#     quebra_recibos_mai = quebra_recibo_mai_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_mai['valor_pago'] = quebra_recibos_mai['valor_pago'].astype(float)
#     # st.write(quebra_recibos_mai['valor_pago'].sum())
# elif filter_date == 'Jun/2022':
#     quebra_recibos_jun = quebra_recibo_jun_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_jun['valor_pago'] = quebra_recibos_jun['valor_pago'].astype(float)
#     # st.write(quebra_recibos_jun['valor_pago'].sum())
# elif filter_date == 'Jul/2022':
#     quebra_recibos_jul = quebra_recibo_jul_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_jul['valor_pago'] = quebra_recibos_jul['valor_pago'].astype(float)
#     # st.write(quebra_recibos_jul['valor_pago'].sum())
# elif filter_date == 'Ago/2022':
#     quebra_recibos_ago = quebra_recibo_ago_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_ago['valor_pago'] = quebra_recibos_ago['valor_pago'].astype(float)
#     # st.write(quebra_recibos_ago['valor_pago'].sum())
# elif filter_date == 'Set/2022':
#     quebra_recibos_set = quebra_recibo_set_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_set['valor_pago'] = quebra_recibos_set['valor_pago'].astype(float)
#     # st.write(quebra_recibos_set['valor_pago'].sum())
# elif filter_date == 'Out/2022':
#     quebra_recibos_out = quebra_recibo_out_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_out['valor_pago'] = quebra_recibos_out['valor_pago'].astype(float)
#     # st.write(quebra_recibos_out['valor_pago'].sum())
# elif filter_date == 'Nov/2022':
#     quebra_recibos_nov = quebra_recibo_nov_22_func(media_para_quebra, df_append_all_amb)
#     # quebra_recibos_nov['valor_pago'] = quebra_recibos_nov['valor_pago'].astype(float)
#     # st.write(quebra_recibos_nov['valor_pago'].sum())
# elif filter_date == 'Dez/2022':
    # quebra_recibos_dez = quebra_recibo_dez_22_func(media_para_quebra, df_append_all_amb)
    # quebra_recibos_dez['valor_pago'] = quebra_recibos_dez['valor_pago'].astype(float)
    # st.write(quebra_recibos_dez['valor_pago'].sum())

if filter_date == '2023':
    quebra_recibos_jan_23 = quebra_recibo_jan_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev_23 = quebra_recibo_fev_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar_23 = quebra_recibo_mar_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_abr_23 = quebra_recibo_abr_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mai_23 = quebra_recibo_mai_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jun_23 = quebra_recibo_jun_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jul_23 = quebra_recibo_jul_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_ago_23 = quebra_recibo_ago_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_set_23 = quebra_recibo_set_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_out_23 = quebra_recibo_out_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_nov_23 = quebra_recibo_nov_23_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_dez_23 = quebra_recibo_dez_23_func(media_para_quebra, df_append_all_amb)
else:
    quebra_recibos_jan = quebra_recibo_jan_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_fev = quebra_recibo_fev_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mar = quebra_recibo_mar_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_abr = quebra_recibo_abr_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_mai = quebra_recibo_mai_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jun = quebra_recibo_jun_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_jul = quebra_recibo_jul_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_ago = quebra_recibo_ago_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_set = quebra_recibo_set_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_out = quebra_recibo_out_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_nov = quebra_recibo_nov_22_func(media_para_quebra, df_append_all_amb)
    quebra_recibos_dez = quebra_recibo_dez_22_func(media_para_quebra, df_append_all_amb)

# quebra_recibos_mar_23
# quebra_recibos_abr_23
# quebra_recibos_mai_23
# quebra_recibos_jun_23
# quebra_recibos_jul_23
# quebra_recibos_ago_23
# quebra_recibos_set_23
# quebra_recibos_out_23
# quebra_recibos_nov_23
# quebra_recibos_dez_23
if filter_date == '2023':
    df_append_all_amb['ano_utilizacao'].max()
    total = len(quebra_recibos_jan_23) + len(quebra_recibos_fev_23) + len(quebra_recibos_mar_23) + len(quebra_recibos_abr_23) + len(quebra_recibos_mai_23) + len(quebra_recibos_jun_23) + len(quebra_recibos_jul_23) + len(quebra_recibos_ago_23) + len(quebra_recibos_set_23) + len(quebra_recibos_out_23) + len(quebra_recibos_nov_23) + len(quebra_recibos_dez_23)
    if total == 1:
        st.write('###### Foi encontrado', total, 'poss√≠vel quebra de recibo apenas.')
        concat = pd.concat([quebra_recibos_jan_23, quebra_recibos_fev_23, quebra_recibos_mar_23, quebra_recibos_abr_23, quebra_recibos_mai_23, quebra_recibos_jun_23, quebra_recibos_jul_23, quebra_recibos_ago_23, quebra_recibos_set_23, quebra_recibos_out_23, quebra_recibos_nov_23, quebra_recibos_dez_23])
        concat = concat.rename(columns={"id_pessoa": "ID do usu√°rio", "provedor": "Provedor", "cod_tuss": "TUSS", "valor_pago": "Valor pago", 'qtd_cobrancas': "Cobran√ßas", "operadora": "Operadora"})
        concat

        def to_excel(df):
             output = BytesIO()
             writer = pd.ExcelWriter(output, engine='xlsxwriter')
             concat.to_excel(writer, index=False, sheet_name='Sheet1')
             workbook = writer.book
             worksheet = writer.sheets['Sheet1']
             format1 = workbook.add_format({'num_format': '0.00'}) 
             worksheet.set_column('A:A', None, format1)  
             writer.close()
             processed_data = output.getvalue()
             return processed_data
        df_xlsx = to_excel(concat)
        st.download_button(label='üì• Baixar Planilha', data=df_xlsx, file_name= 'quebra_recibos_2023.xlsx')
	
    elif total > 1:
        st.write('###### Foram encontrados', total, 'poss√≠veis quebras de recibo.')
        concat = pd.concat([quebra_recibos_jan_23, quebra_recibos_fev_23, quebra_recibos_mar_23, quebra_recibos_abr_23, quebra_recibos_mai_23, quebra_recibos_jun_23, quebra_recibos_jul_23, quebra_recibos_ago_23, quebra_recibos_set_23, quebra_recibos_out_23, quebra_recibos_nov_23, quebra_recibos_dez_23])
        concat = concat.rename(columns={"id_pessoa": "ID do usu√°rio", "provedor": "Provedor", "cod_tuss": "TUSS", "valor_pago": "Valor pago", 'qtd_cobrancas': "Cobran√ßas", "operadora": "Operadora"})
        concat

        def to_excel(df):
             output = BytesIO()
             writer = pd.ExcelWriter(output, engine='xlsxwriter')
             concat.to_excel(writer, index=False, sheet_name='Sheet1')
             workbook = writer.book
             worksheet = writer.sheets['Sheet1']
             format1 = workbook.add_format({'num_format': '0.00'}) 
             worksheet.set_column('A:A', None, format1)  
             writer.close()
             processed_data = output.getvalue()
             return processed_data
        df_xlsx = to_excel(concat)
        st.download_button(label='üì• Baixar Planilha', data=df_xlsx, file_name= 'quebra_recibos_2023.xlsx')
	
    else:
        st.info('Nenhum alerta de poss√≠vel inconsist√™ncia foi encontrado para esse per√≠odo. \n\n**Uma notifica√ß√£o te avisar√° se algo diferente acontecer.**', icon="üåü")

elif filter_date == '2022':
    total = len(quebra_recibos_jan) + len(quebra_recibos_fev) + len(quebra_recibos_mar) + len(quebra_recibos_abr) + len(quebra_recibos_mai) + len(quebra_recibos_jun) + len(quebra_recibos_jul) + len(quebra_recibos_ago) + len(quebra_recibos_set) + len(quebra_recibos_out) + len(quebra_recibos_nov) + len(quebra_recibos_dez)
    if total == 1:
        st.write('###### Foi encontrado', total, 'poss√≠vel quebra de recibo apenas.')
        concat = pd.concat([quebra_recibos_jan, quebra_recibos_fev, quebra_recibos_mar, quebra_recibos_abr, quebra_recibos_mai, quebra_recibos_jun, quebra_recibos_jul, quebra_recibos_ago, quebra_recibos_set, quebra_recibos_out, quebra_recibos_nov, quebra_recibos_dez])
        concat = concat.rename(columns={"id_pessoa": "ID do usu√°rio", "provedor": "Provedor", "cod_tuss": "TUSS", "valor_pago": "Valor pago", 'qtd_cobrancas': "Cobran√ßas", "operadora": "Operadora"})
        concat

        def to_excel(df):
             output = BytesIO()
             writer = pd.ExcelWriter(output, engine='xlsxwriter')
             concat.to_excel(writer, index=False, sheet_name='Sheet1')
             workbook = writer.book
             worksheet = writer.sheets['Sheet1']
             format1 = workbook.add_format({'num_format': '0.00'}) 
             worksheet.set_column('A:A', None, format1)  
             writer.close()
             processed_data = output.getvalue()
             return processed_data
        df_xlsx = to_excel(concat)
        st.download_button(label='üì• Baixar Planilha', data=df_xlsx, file_name= 'quebra_recibos_2023.xlsx')
	
    elif total > 1:
        st.write('###### Foram encontrados', total, 'poss√≠veis quebras de recibo.')
        concat = pd.concat([quebra_recibos_jan, quebra_recibos_fev, quebra_recibos_mar, quebra_recibos_abr, quebra_recibos_mai, quebra_recibos_jun, quebra_recibos_jul, quebra_recibos_ago, quebra_recibos_set, quebra_recibos_out, quebra_recibos_nov, quebra_recibos_dez])
        concat = concat.rename(columns={"id_pessoa": "ID do usu√°rio", "provedor": "Provedor", "cod_tuss": "TUSS", "valor_pago": "Valor pago", 'qtd_cobrancas': "Cobran√ßas", "operadora": "Operadora"})
        concat

        def to_excel(df):
             output = BytesIO()
             writer = pd.ExcelWriter(output, engine='xlsxwriter')
             concat.to_excel(writer, index=False, sheet_name='Sheet1')
             workbook = writer.book
             worksheet = writer.sheets['Sheet1']
             format1 = workbook.add_format({'num_format': '0.00'}) 
             worksheet.set_column('A:A', None, format1)  
             writer.close()
             processed_data = output.getvalue()
             return processed_data
        df_xlsx = to_excel(concat)
        st.download_button(label='üì• Baixar Planilha', data=df_xlsx, file_name= 'quebra_recibos_2023.xlsx')
	
    else:
        st.info('Nenhum alerta de poss√≠vel inconsist√™ncia foi encontrado para esse per√≠odo. \n\n**Uma notifica√ß√£o te avisar√° se algo diferente acontecer.**', icon="üåü")

else:
    total = len(quebra_recibos_jan_23) + len(quebra_recibos_fev_23) + len(quebra_recibos_mar_23) + len(quebra_recibos_abr_23) + len(quebra_recibos_mai_23) + len(quebra_recibos_jun_23) + len(quebra_recibos_jul_23) + len(quebra_recibos_ago_23) + len(quebra_recibos_set_23) + len(quebra_recibos_out_23) + len(quebra_recibos_nov_23) + len(quebra_recibos_dez_23)
    if total == 1:
        st.write('###### Foi encontrado', total, 'poss√≠vel quebra de recibo apenas.')
        concat = pd.concat([quebra_recibos_jan_23, quebra_recibos_fev_23, quebra_recibos_mar_23, quebra_recibos_abr_23, quebra_recibos_mai_23, quebra_recibos_jun_23, quebra_recibos_jul_23, quebra_recibos_ago_23, quebra_recibos_set_23, quebra_recibos_out_23, quebra_recibos_nov_23, quebra_recibos_dez_23])
        concat = concat.rename(columns={"id_pessoa": "ID do usu√°rio", "provedor": "Provedor", "cod_tuss": "TUSS", "valor_pago": "Valor pago", 'qtd_cobrancas': "Cobran√ßas", "operadora": "Operadora"})
        concat

        def to_excel(df):
            output = BytesIO()
            writer = pd.ExcelWriter(output, engine='xlsxwriter')
            concat.to_excel(writer, index=False, sheet_name='Sheet1')
            workbook = writer.book
            worksheet = writer.sheets['Sheet1']
            format1 = workbook.add_format({'num_format': '0.00'}) 
            worksheet.set_column('A:A', None, format1)  
            writer.close()
            processed_data = output.getvalue()
            return processed_data
        df_xlsx = to_excel(concat)
        st.download_button(label='üì• Baixar Planilha', data=df_xlsx, file_name= 'quebra_recibos_2023.xlsx')
    
    elif total > 1:
        st.write('###### Foram encontrados', total, 'poss√≠veis quebras de recibo.')
        concat = pd.concat([quebra_recibos_jan_23, quebra_recibos_fev_23, quebra_recibos_mar_23, quebra_recibos_abr_23, quebra_recibos_mai_23, quebra_recibos_jun_23, quebra_recibos_jul_23, quebra_recibos_ago_23, quebra_recibos_set_23, quebra_recibos_out_23, quebra_recibos_nov_23, quebra_recibos_dez_23])
        concat = concat.rename(columns={"id_pessoa": "ID do usu√°rio", "provedor": "Provedor", "cod_tuss": "TUSS", "valor_pago": "Valor pago", 'qtd_cobrancas': "Cobran√ßas", "operadora": "Operadora"})
        concat

        def to_excel(df):
            output = BytesIO()
            writer = pd.ExcelWriter(output, engine='xlsxwriter')
            concat.to_excel(writer, index=False, sheet_name='Sheet1')
            workbook = writer.book
            worksheet = writer.sheets['Sheet1']
            format1 = workbook.add_format({'num_format': '0.00'}) 
            worksheet.set_column('A:A', None, format1)  
            writer.close()
            processed_data = output.getvalue()
            return processed_data
        df_xlsx = to_excel(concat)
        st.download_button(label='üì• Baixar Planilha', data=df_xlsx, file_name= 'quebra_recibos_2023.xlsx')
    
    else:
        st.info('Nenhum alerta de poss√≠vel inconsist√™ncia foi encontrado para esse per√≠odo. \n\n**Uma notifica√ß√£o te avisar√° se algo diferente acontecer.**', icon="üåü")

'''----'''

st.write('\n\n')

st.markdown('## üí° A√ß√µes recomendadas e boas pr√°ticas')

st.markdown('Ao lidar com procedimentos pagos pelo plano de sa√∫de em que possam ter ocorrido quebras de recibo ou cobran√ßas de retorno, considere as seguintes boas pr√°ticas:')

st.write('\n\n')

st.markdown('##### 1. Revisar os registros de utiliza√ß√µes:')
st.markdown('Verifique cuidadosamente os registros e informa√ß√µes relacionadas aos procedimentos realizados. Priorize os alertas de maior gasto ou que mais vezes se repetem para um mesmo provedor ou benefici√°rio. Tente interpretar o contexto das utiliza√ß√µes levantadas acima na base de procedimentos do plano de sa√∫de para identificar poss√≠veis discrep√¢ncias, erros, ou justificativas.')

st.markdown('##### 2. Saiba mais sobre o provedor de servi√ßos m√©dicos:')
st.markdown('Entre em contato com, ou pesquise mais sobre, o provedor de servi√ßos m√©dicos para interpretar os alertas identificados. Pesquise pelos pre√ßos cobrados pelas consultas por aquele provedor, em caso de diverg√™ncia com os registros na base busque explica√ß√£o detalhada sobre os motivos dessas ocorr√™ncias com a operadora.')

st.markdown('##### 3. Contatar o plano de sa√∫de:')
st.markdown('Comunique-se tamb√©m com o plano de sa√∫de para informar sobre os alertas de poss√≠veis quebras de recibo, cobran√ßas de retorno, ou outras prov√°veis diverg√™ncias. Forne√ßa os detalhes espec√≠ficos dos registros e descreva claramente o problema encontrado. Pergunte sobre o processo a ser seguido para investigar e contestar os alertas de poss√≠veis cobran√ßas indevidas que fugiram do padr√£o de utiliza√ß√£o da popula√ß√£o.')

st.markdown('##### 4. Solicitar uma investiga√ß√£o interna:')
st.markdown('Pe√ßa ao plano de sa√∫de que conduzam uma investiga√ß√£o em conjunto sobre o assunto. Isso pode envolver revisar os registros, comparar comprovantes de pagamento e analisar a documenta√ß√£o pertinente para esclarecer as discrep√¢ncias e encontrar uma solu√ß√£o adequada.')

st.markdown('##### 5. Construir iniciativas de economia em sa√∫de:')
st.markdown('Construa e/ou comunique programas corporativos para educa√ß√£o de economia em sa√∫de aos benefici√°rios, evidencie estimativas de economia sobre o impacto sist√™mico gerado e o efeito de poss√≠veis utiliza√ß√µes indevidas sobre o aumento dos gastos com plano de sa√∫de da empresa. \n\n Mobilize a√ß√µes de comunica√ß√£o para propagar a informa√ß√£o entre os benefici√°rios de que a companhia est√° se protegendo contra utiliza√ß√µes indevidas, **deixe-os informados**. Demonstre as iniciativas criadas para a operadora, isso pode fortalecer a sua posi√ß√£o em uma negocia√ß√£o.')

st.markdown('##### 6. Manter registros e evid√™ncias:')
st.markdown('Certifique-se de manter c√≥pias de todos os registros, recibos e faturas se fornecidos, e-mails e quaisquer outras comunica√ß√µes relevantes relacionadas ao problema. Esses documentos ser√£o essenciais para comprovar sua reclama√ß√£o e auxiliar na resolu√ß√£o da situa√ß√£o.')

st.write('\n\n')

st.warning('Lembre-se de que cada situa√ß√£o pode ser √∫nica, √© importante levantar mais informa√ß√µes sobre os alertas de procedimentos levantados. Mantenha um registro de todas as comunica√ß√µes e tente resolver o problema buscando o apoio de profissionais especializados, se necess√°rio.')


