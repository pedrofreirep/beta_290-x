import streamlit as st
from st_files_connection import FilesConnection

from functions.upper_outliers_nivel_provedor import proc_preco_nivel_provedor_func
from functions.upper_outliers_nivel_provedor import upper_outliers_nivel_provedor_func

import pandas as pd
from PIL import Image

# import zipfile
import xlsxwriter
from io import BytesIO

st.set_page_config(
     page_title="Auditoria Beta",
     page_icon="üèóÔ∏è",
 )

st.cache_resource.clear()

conn = st.experimental_connection('s3', type=FilesConnection)

@st.cache_data(ttl=3600, show_spinner="1/4 - Carregando base completa...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_1():
    return conn.read("df-for-mvps/6/290/mai-2024/df_append_all.csv", input_format="csv")
#     return pd.read_csv("../dados/df_append_all.csv")

df_append_all = get_data_1()

# @st.cache_data(ttl=3600, show_spinner="2/4 - Carregando hist√≥rico...") #Ler base com a classifica√ß√£o TUSS da ANS
# def get_data_2():
#     return conn.read("df-for-mvps/6/290/mai-2024/df_append.csv", input_format="csv")
# #     return pd.read_csv('../dados/df_append.csv')
    
# df_append = get_data_2()

# df_append = df_append_all.dropna()


# zf = zipfile.ZipFile('cod_tuss_subgrupo_classe_2022_ponto_e_virgula.csv.zip') 

@st.cache_data(ttl=3600, show_spinner="4/4 - Carregando c√≥digos TUSS...") #Ler base com a classifica√ß√£o TUSS da ANS
def get_data_4():
    return conn.read("df-for-mvps/tuss/cod_tuss_subgrupo_classe_2022_ponto_e_virgula 2.csv", input_format="csv")
	# return pd.read_csv(zf.open('cod_tuss_subgrupo_classe_2022_ponto_e_virgula.csv'))

df_subgrupo = get_data_4()

# df_append["cod_tuss"] = df_append["cod_tuss"].astype(int).astype(str)
df_append_all = df_append_all.drop(df_append_all[df_append_all.cod_tuss == "591734"].index)
df_append_all["cod_tuss"] = df_append_all["cod_tuss"].astype(int).astype(str)
df_subgrupo["cod_tuss"] = df_subgrupo["cod_tuss"].astype(int).astype(str)

# df_append["dt_utilizacao"] = pd.to_datetime(df_append['dt_utilizacao'], format='mixed')
df_append_all["dt_utilizacao"] = pd.to_datetime(df_append_all['dt_utilizacao'], dayfirst=False, errors='coerce')

# df_append["mes_utilizacao"] = df_append["mes_utilizacao"].fillna(0).astype(int)
# df_append["ano_utilizacao"] = df_append["ano_utilizacao"].fillna(0).astype(int)

df_append_all["mes_utilizacao"] = df_append_all["mes_utilizacao"].fillna(0).astype(int)
df_append_all["ano_utilizacao"] = df_append_all["ano_utilizacao"].fillna(0).astype(int)

# df_append["id_pessoa"] = df_append["id_pessoa"].astype(int).astype(str)
df_append_all["id_pessoa"] = df_append_all["id_pessoa"].astype(int).astype(str)

# df_subgrupo = pd.read_csv('../bases_de_terminologias/cod_tuss_subgrupo_classe_2022_ponto_e_virgula.csv', sep=';')
df_subgrupo["cod_tuss"] = df_subgrupo["cod_tuss"].astype(int).astype(str)

df_append_all['operadora'] = df_append_all['operadora'].astype(str)

st.markdown("# Analisando o padr√£o do pre√ßo de procedimentos")
st.sidebar.markdown("# Analisando o padr√£o do pre√ßo de procedimentos")

st.markdown('Cada sinistro, √© avaliado pelo gasto m√©dio e desvio padr√£o do valor pago para cada provedor. Dessa forma, s√£o assinalados neste t√≥pico sinistros que, apresentaram gastos maiores do que soma entre a m√©dia e desvio padr√£o do respectivo procedimento para o mesmo provedor, multiplicado ainda pela VCMH acumulada do √∫ltimo ano.')

filter_date = st.sidebar.selectbox(label='Selecione o per√≠odo', options=[ '2023'])

if filter_date == 'Mar/2023':
    min_date = pd.to_datetime('2023-03-01')
    max_date = pd.to_datetime('2023-03-30')
elif filter_date == 'Fev/2023':
    min_date = pd.to_datetime('2023-02-01')
    max_date = pd.to_datetime('2023-02-28')
elif filter_date == 'Jan/2023':
    min_date = pd.to_datetime('2023-01-01')
    max_date = pd.to_datetime('2023-01-31')
elif filter_date == 'Dez/2022':
    min_date = pd.to_datetime('2022-12-01')
    max_date = pd.to_datetime('2022-12-31')
elif filter_date == 'Nov/2022':
    min_date = pd.to_datetime('2022-11-01', format='%Y-%m-%d')
    max_date = pd.to_datetime('2022-11-30', format='%Y-%m-%d')
elif filter_date == 'Out/2022':
    min_date = pd.to_datetime('2022-10-01')
    max_date = pd.to_datetime('2022-10-31')
elif filter_date == 'Set/2022':
    min_date = pd.to_datetime('2022-09-01')
    max_date = pd.to_datetime('2022-09-30')
elif filter_date == 'Ago/2022':
    min_date = pd.to_datetime('2022-08-01')
    max_date = pd.to_datetime('2022-08-31')
elif filter_date == 'Jul/2022':
    min_date = pd.to_datetime('2022-07-01')
    max_date = pd.to_datetime('2022-07-30')
elif filter_date == 'Jun/2022':
    min_date = pd.to_datetime('2022-06-01')
    max_date = pd.to_datetime('2022-06-30')
elif filter_date == 'Mai/2022':
    min_date = pd.to_datetime('2022-05-01')
    max_date = pd.to_datetime('2022-05-31')
elif filter_date == 'Abr/2022':
    min_date = pd.to_datetime('2022-04-01')
    max_date = pd.to_datetime('2022-04-30')
elif filter_date == 'Mar/2022':
    min_date = pd.to_datetime('2022-03-01')
    max_date = pd.to_datetime('2022-03-31')
elif filter_date == 'Fev/2022':
    min_date = pd.to_datetime('2022-02-01')
    max_date = pd.to_datetime('2022-02-28')
elif filter_date == 'Jan/2022':
    min_date = pd.to_datetime('2022-01-01')
    max_date = pd.to_datetime('2022-01-31')
elif filter_date == '2022':
    min_date = pd.to_datetime('2022-01-01')
    max_date = pd.to_datetime('2022-12-31')
elif filter_date == '2023':
    min_date = pd.to_datetime('2023-01-01')
    max_date = pd.to_datetime('2023-12-31')
else:
    min_date = pd.to_datetime('2018-12-01')
    max_date = pd.to_datetime('2022-12-31')

insurance_option = df_append_all['operadora'].unique().tolist()

if len(insurance_option) > 1:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=['Todas', insurance_option[0], insurance_option[1]])
else:
    filter_insurance = st.sidebar.selectbox(label='Selecione a Operadora', options=[insurance_option[0]])

image = conn.open("df-for-mvps/6/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=110)

image = conn.open("df-for-mvps/6/290/img/logo.png", input_format="png")
image = Image.open(image)
st.sidebar.image(image, width=50)

st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')
# st.sidebar.write('\n\n')


st.sidebar.caption('Constru√≠do com üß† por Blue AI')

# 5 Analisando o padr√£o do pre√ßo de procedimentos

# 5 Analisando o padr√£o do pre√ßo de procedimentos
proc_preco_nivel_provedor = proc_preco_nivel_provedor_func()
upper_outliers_nivel_provedor = upper_outliers_nivel_provedor_func(df_append_all.dropna(), df_subgrupo, proc_preco_nivel_provedor, filter_insurance, max_date, min_date)

total = len(upper_outliers_nivel_provedor)

if total == 1:
    st.write('###### Foi encontrado', total, 'procedimento outlier por prestador:')

    upper_outliers_nivel_provedor = upper_outliers_nivel_provedor.rename(columns={"provedor": "Provedor", "cod_tuss": "TUSS", "proc_tuss": "Descri√ß√£o", "valor_pago": "Valor pago", "pre√ßo_limite": "Pre√ßo limite", 'id_pessoa': 'ID do Usu√°rio', "dt_utilizacao":"Data"})
    up = upper_outliers_nivel_provedor[(upper_outliers_nivel_provedor['Valor pago'] > upper_outliers_nivel_provedor['Pre√ßo limite']) & (upper_outliers_nivel_provedor['Data'] <= max_date) & (upper_outliers_nivel_provedor['Data'] >= min_date)][['ID do Usu√°rio', 'TUSS', 'Descri√ß√£o', 'Provedor', 'Data', 'Valor pago', 'Pre√ßo limite', 'Varia√ß√£o do pre√ßo', 'operadora']]
    up.loc[:, 'Valor pago'] = up['Valor pago'].map('{:.2f}'.format)
    up.loc[:, 'Pre√ßo limite'] = up['Pre√ßo limite'].map('{:.2f}'.format)
    up

    # up_count = up.groupby(['TUSS', 'Descri√ß√£o', 'Provedor']).count().reset_index()
    # up_count

    def to_excel(df):
        output = BytesIO()
        writer = pd.ExcelWriter(output, engine='xlsxwriter')
        up.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        format1 = workbook.add_format({'num_format': '0.00'}) 
        worksheet.set_column('A:A', None, format1)  
        writer.close()
        processed_data = output.getvalue()
        return processed_data
    df_xlsx = to_excel(up)
    st.download_button(label='üì• Baixar Planilha',
                                    data=df_xlsx ,
                                    file_name= 'procedimentos_fora_do_padrao.xlsx')
elif total > 1:
    st.write('###### Foram encontrados', total, 'procedimentos outliers por prestador:')

    upper_outliers_nivel_provedor = upper_outliers_nivel_provedor.rename(columns={"provedor": "Provedor", "cod_tuss": "TUSS", "proc_tuss": "Descri√ß√£o", "valor_pago": "Valor pago", "pre√ßo_limite": "Pre√ßo limite", 'id_pessoa': 'ID do Usu√°rio', "dt_utilizacao":"Data", "operadora":"Operadora"})
    up = upper_outliers_nivel_provedor[(upper_outliers_nivel_provedor['Valor pago'] > upper_outliers_nivel_provedor['Pre√ßo limite']) & (upper_outliers_nivel_provedor['Data'] <= max_date) & (upper_outliers_nivel_provedor['Data'] >= min_date)][['ID do Usu√°rio', 'TUSS', 'Descri√ß√£o', 'Provedor', 'Data', 'Valor pago', 'Pre√ßo limite', 'Varia√ß√£o do pre√ßo', 'Operadora']]
    # up.loc[:, 'Valor pago'] = up['Valor pago'].map('{:.2f}'.format)
    up['Valor pago'] = up['Valor pago'].astype(float)
    # up.loc[:, 'Pre√ßo limite'] = up['Pre√ßo limite'].map('{:.2f}'.format)
    up['Pre√ßo limite'] = up['Pre√ßo limite'].astype(float)
    up

    st.caption('###### Legenda')
    st.caption('‚Ä¢ Pre√ßo limite: Representa o valor m√°ximo do intervalo de pre√ßos normalmente exercido em um procedimento espec√≠fico.')
    st.caption('‚Ä¢ Varia√ß√£o do pre√ßo: Mostra a varia√ß√£o de pre√ßo pago, quanto em R$ o valor outliers pago ficou acima do pre√ßo limite.')

    def to_excel(df):
        output = BytesIO()
        writer = pd.ExcelWriter(output, engine='xlsxwriter')
        up.to_excel(writer, index=False, sheet_name='Sheet1')
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']
        format1 = workbook.add_format({'num_format': '0.00'}) 
        worksheet.set_column('A:A', None, format1)  
        writer.close()
        processed_data = output.getvalue()
        return processed_data
    df_xlsx = to_excel(up)
    st.download_button(label='üì• Baixar Planilha',
                                    data=df_xlsx ,
                                    file_name= 'procedimentos_fora_do_padrao.xlsx')

    st.write('\n\n')

    up_count = up[['TUSS', 'Descri√ß√£o', 'Provedor', 'ID do Usu√°rio']].groupby(['TUSS', 'Descri√ß√£o', 'Provedor']).count().reset_index().rename(columns={"ID do Usu√°rio": "Qtd de outliers"})
    up_mean = up[['TUSS', 'Descri√ß√£o', 'Provedor', 'Valor pago']].groupby(['TUSS', 'Descri√ß√£o', 'Provedor'])['Valor pago'].mean().reset_index()
    var_mean = up[['TUSS', 'Descri√ß√£o', 'Provedor', 'Pre√ßo limite', 'Varia√ß√£o do pre√ßo']].groupby(['TUSS', 'Descri√ß√£o', 'Provedor', 'Pre√ßo limite'])['Varia√ß√£o do pre√ßo'].mean().reset_index()
    up_count = up_count.merge(up_mean, on=['TUSS', 'Descri√ß√£o', 'Provedor']).rename(columns={"Valor pago": "Valor outlier m√©dio"})
    up_count = up_count.merge(var_mean, on=['TUSS', 'Descri√ß√£o', 'Provedor']).rename(columns={"Varia√ß√£o do pre√ßo": "Varia√ß√£o m√©dia"})
    up_count['% Varia√ß√£o m√©dia'] = (up_count['Varia√ß√£o m√©dia']/up_count['Pre√ßo limite'])
    # up_count['% Varia√ß√£o m√©dia'] = up_count['% Varia√ß√£o m√©dia'].str.rstrip("%").astype(float)*100
    up_count['% Varia√ß√£o m√©dia'] = up_count['% Varia√ß√£o m√©dia'].map('{:.2%}'.format)
    # up_count['% Varia√ß√£o m√©dia'] = pd.Series(["{0:.2f}%".format(val * 100) for val in up_count['% Varia√ß√£o m√©dia']])

    st.write('###### Os', total, 'procedimentos outliers foram realizados em', len(up_count), ' provedores diferentes:')
    # Agora voc√™ consegue ver quais provedores mais fogem do padr√£o de pre√ßo de um determinado procedimento. 
    st.write('A seguir, voc√™ encontrar√° quantas vezes cada provedor esteve acima do padr√£o de pre√ßo para cada procedimento. Se a quantidade de repeti√ß√µes for alta e se o pre√ßo estiver relativamente muito acima daquilo que normalmente √© pago por um procedimento, buscar mais evid√™ncias que justiquem a quantidade de outliers ou recomendar provedores alternativos que estejam alinhados aos padr√µes de uso podemo ser boas a√ß√µes.')

    up_count

    st.caption('###### Legenda')
    st.caption('‚Ä¢ Qtd de outliers: Mostra a quantidade de vezes que um provedor superou o intervalo mais comum de pre√ßo pago por um procedimento.')
    st.caption('‚Ä¢ Valor outlier m√©dio: Mostra a m√©dia do pre√ßo pago pelo procedimento em sinistros considerados outliers de um provedor.')
    st.caption('‚Ä¢ Pre√ßo limite: Representa o valor m√°ximo do intervalo de pre√ßos normalmente exercido em um procedimento espec√≠fico.')
    st.caption('‚Ä¢ Varia√ß√£o m√©dia: Mostra a varia√ß√£o de pre√ßo m√©dio, quanto em R$ a m√©dia de pre√ßos outliers ficou acima do pre√ßo limite.')
    st.caption('‚Ä¢ % Varia√ß√£o m√©dia: Mostra o qunato a varia√ß√£o de pre√ßo m√©dio representa do pre√ßo limite, ou seja o qu√£o discrepante a varia√ß√£o de pre√ßo foi quando comparado √†quilo que normalmente √© exercido.')


else:
    st.info('Nenhum alerta de poss√≠vel inconsist√™ncia foi encontrado para esse per√≠odo. \n\n**Uma notifica√ß√£o te avisar√° se algo diferente acontecer.**', icon="üåü")

ver_padrao = st.checkbox('Ver padr√£o de pre√ßo por prestador:')

if ver_padrao:
    proc_preco_nivel_provedor = proc_preco_nivel_provedor.rename(columns={"provedor": "Provedor", "cod_tuss": "TUSS", "min": "M√≠nimo", "m√©dia": "M√©dia", "max": "M√°ximo", "desvio_padr√£o": "Desvio Padr√£o", "IQR": "FIQ", "pre√ßo_limite": "Pre√ßo limite", "qtd_realizacoes":"Realiza√ß√µes", "q1":"Q1", "q2":"Q2", "q3":"Q3"})
    proc_preco_nivel_provedor[['TUSS', 'Provedor', 'Realiza√ß√µes', 'M√©dia', 'M√≠nimo', 'Q1', 'Q2', 'Q3', 'M√°ximo', 'Desvio Padr√£o', 'FIQ', 'Pre√ßo limite']]

'''----'''

st.write('\n\n')

st.markdown('## üí° A√ß√µes recomendadas e boas pr√°ticas')

st.markdown('Ao lidar com procedimentos pagos pelo plano de sa√∫de acima do padr√£o de pre√ßo cobrado pelo mesmo procedimento, aqui est√£o algumas boas pr√°ticas que podem ser consideradas:')

st.write('\n\n')

st.markdown('##### 1. Pesquisar alternativas:')
st.markdown('Procure por op√ß√µes alternativas de prestadores de servi√ßos m√©dicos que ofere√ßam o mesmo procedimento a pre√ßos mais acess√≠veis, ou que sigam a mediana do valor pago. Isso pode incluir hospitais, cl√≠nicas ou profissionais de sa√∫de que cobrem taxas mais razo√°veis, sem comprometer a qualidade do atendimento.')

st.markdown('##### 2. Contatar o plano de sa√∫de:')
st.markdown('Entre em contato com o plano de sa√∫de para expressar sua preocupa√ß√£o e questionar o motivo dos valores acima do padr√£o. Solicite uma justificativa clara e detalhada para a cobran√ßa e pe√ßa uma revis√£o do valor. Explique o contexto e forne√ßa evid√™ncias se poss√≠vel.')

st.markdown('##### 3. Negocia√ß√£o e iniciativas de economia:')
st.markdown('Seja proativo na negocia√ß√£o com o plano de sa√∫de. Apresente argumentos s√≥lidos baseados em pesquisas e refer√™ncias de pre√ßos praticados no mercado (como as an√°lises fornecidas acima), al√©m de iniciativas de economia de pre√ßo colocadas em pr√°tica. \n\n Independente dos questionamentos, √© poss√≠vel construir um **guia de provedores de sa√∫de recomendados**, com aqueles que tendem a cobrar a mediana de pre√ßo com a mesma qualidade para um mesmo procedimento na maior parte das realiza√ß√µes, e comunicar constantemente aos benefici√°rios sobre o mesmo. Isso ajudar√° a embasar suas reivindica√ß√µes e negocia√ß√µes.')

st.markdown('##### 4. Obter suporte profissional:')
st.markdown('Em situa√ß√µes mais complexas ou desafiadoras, √© recomend√°vel buscar orienta√ß√£o e apoio, se poss√≠vel, de profissionais de sa√∫de ou institui√ß√µes relacionadas √† gest√£o de sa√∫de populacional. Eles podem fornecer insights de iniciativas e auxiliar nas apresenta√ß√µes com o plano de sa√∫de.')

st.write('\n\n')

st.warning('Lembre-se de que cada situa√ß√£o pode ser √∫nica e os processos podem variar dependendo do contrato. √â importante manter registros de todas as comunica√ß√µes, documentos e evid√™ncias relevantes ao lidar com procedimentos pagos acima do padr√£o de pre√ßo cobrado pelo plano de sa√∫de.')
